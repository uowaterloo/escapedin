{"ast":null,"code":"import React, { useReducer, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nexport const ActionTypes = {\n  unlocked: \"UNLOCKED\",\n  setState: \"SET_STATE\",\n  completePuzzle: \"COMPLETE_PUZZLE\",\n  reset: \"RESET\",\n  updateAll: \"UPDATE_ALL\"\n}; //States: ['INTRO', 'HIDDEN', 'MAP', 'LOCKSCREEN', 'LOCKSCREEN.UNLOCK', 'HOME', 'PLAYER', 'TINDAWG', 'SLACK', 'PHONE', 'PETWALL', 'FANTASYWALL']\n\nconst initialState = {\n  unlocked: false,\n  appState: \"INTRO\",\n  completedPuzzles: []\n};\nexport const StateContext = React.createContext();\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case ActionTypes.unlocked:\n      return { ...state,\n        unlocked: true\n      };\n\n    case ActionTypes.setState:\n      console.log(`State change: ${action.payload}`);\n      return { ...state,\n        appState: action.payload\n      };\n\n    case ActionTypes.completePuzzle:\n      return { ...state,\n        completedPuzzles: [...state.completedPuzzles, action.payload]\n      };\n\n    case ActionTypes.reset:\n      return initialState;\n\n    case ActionTypes.updateAll:\n      return { ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst statefulReducer = (state, action) => {\n  const newState = reducer(state, action);\n  localStorage.setItem(\"escapedin-state\", JSON.stringify(newState));\n  return newState;\n};\n\nconst useApplicationState = () => {\n  const [state, dispatch] = useReducer(statefulReducer, initialState);\n  const history = useHistory();\n  useEffect(async () => {\n    const savedState = localStorage.getItem(\"escapedin-state\");\n\n    if (savedState) {\n      try {\n        const parsedState = await JSON.parse(savedState);\n\n        if (parsedState.completedPuzzles.includes(\"KIOSK\") && history.location.pathname === \"/\") {\n          history.push(\"/outside_office\");\n        }\n\n        dispatch({\n          type: ActionTypes.updateAll,\n          payload: parsedState\n        });\n      } catch {\n        console.error(\"error parsing game state\");\n      }\n    }\n  }, []);\n  return {\n    state,\n    dispatch\n  };\n};\n\nexport default useApplicationState;","map":{"version":3,"sources":["/Users/raghavsethi/Desktop/webspring/src/components/util/useApplicationState.js"],"names":["React","useReducer","useEffect","useHistory","ActionTypes","unlocked","setState","completePuzzle","reset","updateAll","initialState","appState","completedPuzzles","StateContext","createContext","reducer","state","action","type","console","log","payload","statefulReducer","newState","localStorage","setItem","JSON","stringify","useApplicationState","dispatch","history","savedState","getItem","parsedState","parse","includes","location","pathname","push","error"],"mappings":"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","sourcesContent":["import React, { useReducer, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nexport const ActionTypes = {\n  unlocked: \"UNLOCKED\",\n  setState: \"SET_STATE\",\n  completePuzzle: \"COMPLETE_PUZZLE\",\n  reset: \"RESET\",\n  updateAll: \"UPDATE_ALL\",\n};\n\n//States: ['INTRO', 'HIDDEN', 'MAP', 'LOCKSCREEN', 'LOCKSCREEN.UNLOCK', 'HOME', 'PLAYER', 'TINDAWG', 'SLACK', 'PHONE', 'PETWALL', 'FANTASYWALL']\n\nconst initialState = {\n  unlocked: false,\n  appState: \"INTRO\",\n  completedPuzzles: [],\n};\n\nexport const StateContext = React.createContext();\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case ActionTypes.unlocked:\n      return {\n        ...state,\n        unlocked: true,\n      };\n    case ActionTypes.setState:\n      console.log(`State change: ${action.payload}`);\n\n      return {\n        ...state,\n        appState: action.payload,\n      };\n    case ActionTypes.completePuzzle:\n      return {\n        ...state,\n        completedPuzzles: [...state.completedPuzzles, action.payload],\n      };\n    case ActionTypes.reset:\n      return initialState;\n    case ActionTypes.updateAll:\n      return {\n        ...action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nconst statefulReducer = (state, action) => {\n  const newState = reducer(state, action);\n\n  localStorage.setItem(\"escapedin-state\", JSON.stringify(newState));\n\n  return newState;\n};\n\nconst useApplicationState = () => {\n  const [state, dispatch] = useReducer(statefulReducer, initialState);\n  const history = useHistory();\n\n  useEffect(async () => {\n    const savedState = localStorage.getItem(\"escapedin-state\");\n    if (savedState) {\n      try {\n        const parsedState = await JSON.parse(savedState);\n\n        if (\n          parsedState.completedPuzzles.includes(\"KIOSK\") &&\n          history.location.pathname === \"/\"\n        ) {\n          history.push(\"/outside_office\");\n        }\n\n        dispatch({\n          type: ActionTypes.updateAll,\n          payload: parsedState,\n        });\n      } catch {\n        console.error(\"error parsing game state\");\n      }\n    }\n  }, []);\n\n  return { state, dispatch };\n};\n\nexport default useApplicationState;\n"]},"metadata":{},"sourceType":"module"}