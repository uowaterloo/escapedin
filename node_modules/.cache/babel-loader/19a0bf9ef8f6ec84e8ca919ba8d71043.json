{"ast":null,"code":"var _jsxFileName = \"/Users/raghavsethi/Desktop/mappedin/software/webspring/src/components/panels/BombRoom.js\";\nimport React, { useContext, useState, useEffect, useRef } from \"react\";\nimport { Container as InteractiveImageContainer } from \"../shared/interactive-image\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { StateContext, ActionTypes } from \"../util/useApplicationState\";\nimport styled from \"styled-components\";\nimport { useStopwatch, useTimer } from \"react-timer-hook\";\nconst Container = styled(InteractiveImageContainer)`\n  background-image: url(${props => props.bgImage});\n`;\nconst TimerWrapper = styled.div`\n  position: absolute;\n  left: 30%;\n  right: 40%;\n  top: 53%;\n  bottom: auto;\n\n  display: grid;\n  grid-template: 1fr / repeat(3, 1fr);\n  grid-gap: 20%;\n\n  & > input {\n    font-size: 50px;\n    width: 60px;\n    color: red;\n    border: none;\n    text-transform: uppercase;\n    background-color: white;\n  }\n`;\nconst InputWrapper = styled.div`\n  position: absolute;\n  left: 18.5%;\n  right: 18.5%;\n  top: 80%;\n  bottom: 14.5%;\n\n  display: grid;\n  grid-template: 1fr / repeat(4, 1fr);\n  grid-gap: 3.5%;\n\n  & > input {\n    color: #000;\n    border: none;\n    text-transform: uppercase;\n  }\n`;\nconst unlockCode = [\"stay\", \"hom\", \"fur\", \"evr\"];\nexport default function BombRoom() {\n  const [dataInput, _setDataInput] = useState([\"\", \"\", \"\", \"\"]);\n  const timeoutRef = useRef();\n\n  const setData = (index, value) => {\n    _setDataInput(prevVal => {\n      const newArr = [...prevVal];\n      newArr[index] = value;\n      return newArr;\n    });\n  };\n\n  const [puzzleImage, setPuzzleImage] = useState(\"/office/bombdefusalUI.jpg\");\n  useEffect(() => {\n    const isValid = dataInput.every((value, index) => unlockCode[index].toLowerCase() === value.toLowerCase());\n\n    if (isValid) {\n      timeoutRef.current = setTimeout(() => {\n        setPuzzleImage(\"https://media.giphy.com/media/cReBRwdnlW9gs/giphy.gif\"); //alert(\"Puzzle unlocked\");\n      }, 250);\n    }\n  }, [dataInput]);\n  useEffect(() => () => timeoutRef.current && clearTimeout(timeoutRef.current), []); // STOPWATCH\n  // const {\n  //   seconds,\n  //   minutes,\n  //   hours,\n  //   days,\n  //   isRunning,\n  //   start,\n  //   pause,\n  //   reset,\n  // } = useStopwatch({ autoStart: true });\n  // STOPWATCH END\n\n  const time = new Date();\n  time.setSeconds(time.getSeconds() + 3600); // 10 minutes timer\n\n  const expiryTimestamp = time;\n  const {\n    seconds,\n    minutes,\n    hours,\n    days,\n    isRunning,\n    start,\n    pause,\n    resume,\n    restart\n  } = useTimer({\n    expiryTimestamp,\n    onExpire: () => console.warn(\"onExpire called\")\n  });\n  return puzzleImage = \"/office/bombdefusalUI.jpg\" ? /*#__PURE__*/React.createElement(Container, {\n    bgImage: puzzleImage\n  }, /*#__PURE__*/React.createElement(TimerWrapper, null, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: hours\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: minutes\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: seconds\n  })), /*#__PURE__*/React.createElement(InputWrapper, null, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: dataInput[0],\n    onChange: e => setData(0, e.target.value)\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: dataInput[1],\n    onChange: e => setData(1, e.target.value)\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: dataInput[2],\n    onChange: e => setData(2, e.target.value)\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: dataInput[3],\n    onChange: e => setData(3, e.target.value)\n  }))) : /*#__PURE__*/React.createElement(Container, {\n    bgImage: puzzleImage\n  });\n}","map":{"version":3,"sources":["/Users/raghavsethi/Desktop/mappedin/software/webspring/src/components/panels/BombRoom.js"],"names":["React","useContext","useState","useEffect","useRef","Container","InteractiveImageContainer","Link","useHistory","StateContext","ActionTypes","styled","useStopwatch","useTimer","props","bgImage","TimerWrapper","div","InputWrapper","unlockCode","BombRoom","dataInput","_setDataInput","timeoutRef","setData","index","value","prevVal","newArr","puzzleImage","setPuzzleImage","isValid","every","toLowerCase","current","setTimeout","clearTimeout","time","Date","setSeconds","getSeconds","expiryTimestamp","seconds","minutes","hours","days","isRunning","start","pause","resume","restart","onExpire","console","warn","e","target"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, useRef } from \"react\";\nimport { Container as InteractiveImageContainer } from \"../shared/interactive-image\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { StateContext, ActionTypes } from \"../util/useApplicationState\";\nimport styled from \"styled-components\";\nimport { useStopwatch, useTimer } from \"react-timer-hook\";\n\nconst Container = styled(InteractiveImageContainer)`\n  background-image: url(${(props) => props.bgImage});\n`;\n\nconst TimerWrapper = styled.div`\n  position: absolute;\n  left: 30%;\n  right: 40%;\n  top: 53%;\n  bottom: auto;\n\n  display: grid;\n  grid-template: 1fr / repeat(3, 1fr);\n  grid-gap: 20%;\n\n  & > input {\n    font-size: 50px;\n    width: 60px;\n    color: red;\n    border: none;\n    text-transform: uppercase;\n    background-color: white;\n  }\n`;\n\nconst InputWrapper = styled.div`\n  position: absolute;\n  left: 18.5%;\n  right: 18.5%;\n  top: 80%;\n  bottom: 14.5%;\n\n  display: grid;\n  grid-template: 1fr / repeat(4, 1fr);\n  grid-gap: 3.5%;\n\n  & > input {\n    color: #000;\n    border: none;\n    text-transform: uppercase;\n  }\n`;\n\nconst unlockCode = [\"stay\", \"hom\", \"fur\", \"evr\"];\n\nexport default function BombRoom() {\n  const [dataInput, _setDataInput] = useState([\"\", \"\", \"\", \"\"]);\n  const timeoutRef = useRef();\n\n  const setData = (index, value) => {\n    _setDataInput((prevVal) => {\n      const newArr = [...prevVal];\n      newArr[index] = value;\n      return newArr;\n    });\n  };\n\n  const [puzzleImage, setPuzzleImage] = useState(\n    \"/office/bombdefusalUI.jpg\"\n  );\n\n  useEffect(() => {\n    const isValid = dataInput.every(\n      (value, index) => unlockCode[index].toLowerCase() === value.toLowerCase()\n    );\n\n    if (isValid) {\n      timeoutRef.current = setTimeout(() => {\n        setPuzzleImage(\"https://media.giphy.com/media/cReBRwdnlW9gs/giphy.gif\")\n        //alert(\"Puzzle unlocked\");\n      }, 250);\n    }\n  }, [dataInput]);\n\n  useEffect(\n    () => () => timeoutRef.current && clearTimeout(timeoutRef.current),\n    []\n  );\n\n  // STOPWATCH\n  // const {\n  //   seconds,\n  //   minutes,\n  //   hours,\n  //   days,\n  //   isRunning,\n  //   start,\n  //   pause,\n  //   reset,\n  // } = useStopwatch({ autoStart: true });\n  // STOPWATCH END\n\n  const time = new Date();\n  time.setSeconds(time.getSeconds() + 3600); // 10 minutes timer\n  const expiryTimestamp = time;\n  const {\n    seconds,\n    minutes,\n    hours,\n    days,\n    isRunning,\n    start,\n    pause,\n    resume,\n    restart,\n  } = useTimer({\n    expiryTimestamp,\n    onExpire: () => console.warn(\"onExpire called\"),\n  });\n\n  return (puzzleImage = \"/office/bombdefusalUI.jpg\" ? (\n    <Container bgImage={puzzleImage}>\n      <TimerWrapper>\n        <input type=\"text\" value={hours} />\n        <input type=\"text\" value={minutes} />\n        <input type=\"text\" value={seconds} />\n      </TimerWrapper>\n\n      <InputWrapper>\n        <input\n          type=\"text\"\n          value={dataInput[0]}\n          onChange={(e) => setData(0, e.target.value)}\n        />\n        <input\n          type=\"text\"\n          value={dataInput[1]}\n          onChange={(e) => setData(1, e.target.value)}\n        />\n        <input\n          type=\"text\"\n          value={dataInput[2]}\n          onChange={(e) => setData(2, e.target.value)}\n        />\n        <input\n          type=\"text\"\n          value={dataInput[3]}\n          onChange={(e) => setData(3, e.target.value)}\n        />\n      </InputWrapper>\n    </Container>\n  ) : (\n    <Container bgImage={puzzleImage}></Container>\n  ));\n}\n"]},"metadata":{},"sourceType":"module"}