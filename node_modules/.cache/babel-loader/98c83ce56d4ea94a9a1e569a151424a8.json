{"ast":null,"code":"var _jsxFileName = \"/Users/raghavsethi/Desktop/mappedin/software/webspring/src/components/panels/pet-wall.js\";\nimport React, { useContext, useState, useRef, useEffect } from \"react\";\nimport InteractiveImage from \"../shared/interactive-image\";\nimport Button from \"../shared/button\";\nimport { StateContext, ActionTypes } from \"../util/useApplicationState\";\nimport styled from \"styled-components\";\nconst InputContainer = styled.div`\n  width: 100%;\n  display: grid;\n  align-items: center;\n  grid-template: 1fr / max-content repeat(3, 1fr) max-content;\n  grid-gap: clamp(4px, 2.5%, 16px);\n  input {\n    background-color: ${props => props.bgColor};\n  }\n`;\nexport default function PetWall() {\n  const [inputs, _setInput] = useState([\"\", \"\", \"\"]);\n  const timeoutRef = useRef();\n\n  const setInput = (index, value) => {\n    _setInput(prevVals => {\n      const newArr = [...prevVals];\n      newArr[index] = value;\n      return newArr;\n    });\n  };\n\n  const [colorState, setColorState] = useState(\"rgba(0, 0, 0, 0.85)\");\n  const {\n    state: {\n      completedPuzzles\n    },\n    dispatch\n  } = useContext(StateContext);\n  const isPuzzleComplete = completedPuzzles.includes(\"PETWALL\");\n\n  const markComplete = () => timeoutRef.current = setTimeout(() => dispatch({\n    type: ActionTypes.completePuzzle,\n    payload: \"PETWALL\"\n  }), 1000);\n\n  useEffect(() => () => timeoutRef.current && clearTimeout(timeoutRef.current), []);\n\n  const validate = () => {\n    if (inputs[0] === \"6\" && inputs[1] === \"5\" && inputs[2] === \"10\") {\n      setColorState(\"#30E5A5\");\n      markComplete();\n    } else {\n      setColorState(\"#F63654\");\n    }\n  };\n\n  return isPuzzleComplete ? /*#__PURE__*/React.createElement(InteractiveImage, {\n    src: \"./office/PetWallAnswerEdit.jpg\"\n  }, /*#__PURE__*/React.createElement(React.Fragment, null, \" \")) : /*#__PURE__*/React.createElement(InteractiveImage, {\n    animationPlay: true,\n    src: \"./office/PetWallOriginalEdit.jpg\"\n  }, /*#__PURE__*/React.createElement(InputContainer, {\n    bgColor: colorState\n  }, /*#__PURE__*/React.createElement(\"p\", null, \"Dog Code:\"), /*#__PURE__*/React.createElement(\"input\", {\n    value: inputs[0],\n    onChange: e => {\n      setInput(0, e.target.value);\n    },\n    type: \"number\"\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    value: inputs[1],\n    onChange: e => {\n      setInput(1, e.target.value);\n    },\n    type: \"number\"\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    value: inputs[2],\n    onChange: e => {\n      setInput(2, e.target.value);\n    },\n    type: \"number\"\n  }), /*#__PURE__*/React.createElement(Button, {\n    onClick: validate\n  }, \"Submit Code\")));\n}","map":{"version":3,"sources":["/Users/raghavsethi/Desktop/mappedin/software/webspring/src/components/panels/pet-wall.js"],"names":["React","useContext","useState","useRef","useEffect","InteractiveImage","Button","StateContext","ActionTypes","styled","InputContainer","div","props","bgColor","PetWall","inputs","_setInput","timeoutRef","setInput","index","value","prevVals","newArr","colorState","setColorState","state","completedPuzzles","dispatch","isPuzzleComplete","includes","markComplete","current","setTimeout","type","completePuzzle","payload","clearTimeout","validate","e","target"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useRef, useEffect } from \"react\";\nimport InteractiveImage from \"../shared/interactive-image\";\nimport Button from \"../shared/button\";\nimport { StateContext, ActionTypes } from \"../util/useApplicationState\";\nimport styled from \"styled-components\";\n\nconst InputContainer = styled.div`\n  width: 100%;\n  display: grid;\n  align-items: center;\n  grid-template: 1fr / max-content repeat(3, 1fr) max-content;\n  grid-gap: clamp(4px, 2.5%, 16px);\n  input {\n    background-color: ${(props) => props.bgColor};\n  }\n`;\n\nexport default function PetWall() {\n  const [inputs, _setInput] = useState([\"\", \"\", \"\"]);\n\n  const timeoutRef = useRef();\n\n  const setInput = (index, value) => {\n    _setInput((prevVals) => {\n      const newArr = [...prevVals];\n      newArr[index] = value;\n      return newArr;\n    });\n  };\n\n  const [colorState, setColorState] = useState(\"rgba(0, 0, 0, 0.85)\");\n\n  const {\n    state: { completedPuzzles },\n    dispatch,\n  } = useContext(StateContext);\n\n  const isPuzzleComplete = completedPuzzles.includes(\"PETWALL\");\n\n  const markComplete = () =>\n    (timeoutRef.current = setTimeout(\n      () => dispatch({ type: ActionTypes.completePuzzle, payload: \"PETWALL\" }),\n      1000\n    ));\n\n  useEffect(\n    () => () => timeoutRef.current && clearTimeout(timeoutRef.current),\n    []\n  );\n\n  const validate = () => {\n    if (inputs[0] === \"6\" && inputs[1] === \"5\" && inputs[2] === \"10\") {\n      setColorState(\"#30E5A5\");\n      markComplete();\n    } else {\n      setColorState(\"#F63654\");\n    }\n  };\n\n  return isPuzzleComplete ? (\n    <InteractiveImage src=\"./office/PetWallAnswerEdit.jpg\">\n      <> </>\n    </InteractiveImage>\n  ) : (\n    <InteractiveImage\n      animationPlay={true}\n      src=\"./office/PetWallOriginalEdit.jpg\"\n    >\n      <InputContainer bgColor={colorState}>\n        <p>Dog Code:</p>\n        <input\n          value={inputs[0]}\n          onChange={(e) => {\n            setInput(0, e.target.value);\n          }}\n          type=\"number\"\n        />\n        <input\n          value={inputs[1]}\n          onChange={(e) => {\n            setInput(1, e.target.value);\n          }}\n          type=\"number\"\n        />\n        <input\n          value={inputs[2]}\n          onChange={(e) => {\n            setInput(2, e.target.value);\n          }}\n          type=\"number\"\n        />\n        <Button onClick={validate}>Submit Code</Button>\n      </InputContainer>\n    </InteractiveImage>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}