{"ast":null,"code":"var _jsxFileName = \"/Users/raghavsethi/Desktop/mappedin/software/webspring/src/components/panels/fantasy-wall.js\";\nimport React, { useContext, useState, useEffect, useRef } from \"react\";\nimport InteractiveImage from \"../shared/interactive-image\";\nimport { AiOutlineInfoCircle, AiOutlineCloseCircle } from \"react-icons/ai\";\nimport { StateContext, ActionTypes } from \"../util/useApplicationState\";\nimport styled from \"styled-components\";\nimport Button from \"../shared/button\";\nconst InputContainer = styled.form`\n  width: 100%;\n  display: grid;\n  grid-template: 1fr / max-content repeat(3, 1fr) max-content max-content;\n  grid-gap: clamp(0px, 2.5%, 16px);\n\n  input {\n    text-transform: uppercase;\n    background-color: ${props => {\n  var _props$inputBg;\n\n  return (_props$inputBg = props.inputBg) !== null && _props$inputBg !== void 0 ? _props$inputBg : \"#fff\";\n}};\n    color: #000;\n  }\n\n  p {\n    display: inline-flex;\n    align-items: center;\n  }\n`;\nconst images = {\n  SUCCESS: \"/office/evr_square.jpg\",\n  FAILURE: \"/ui/dog_shake.gif\",\n  INITIAL: \"/office/FantasyMapEdited.jpg\",\n  HINT: \"/office/morse_scroll_minimal.png\"\n};\nconst colors = {\n  SUCCESS: \"#30E5A5\",\n  FAILURE: \"#F63654\"\n};\nexport default function FantasyWall() {\n  const {\n    state: {\n      completedPuzzles\n    },\n    dispatch\n  } = useContext(StateContext);\n  const isPuzzleComplete = completedPuzzles.includes(\"FANTASYWALL\");\n  const [state, setState] = useState(isPuzzleComplete ? \"SUCCESS\" : \"INITIAL\"); //INITIAL, SUCCESS, FAILURE, HINT\n\n  const toggleHint = e => {\n    e.preventDefault();\n    setState(prevVal => {\n      if (prevVal === \"HINT\") {\n        return isPuzzleComplete ? \"SUCCESS\" : \"INITIAL\";\n      }\n\n      return \"HINT\";\n    });\n  };\n\n  const [inputs, _setInput] = useState([\"\", \"\", \"\"]);\n  const timeoutRef = useRef();\n\n  const setInput = (index, value) => {\n    _setInput(prevVals => {\n      const newArr = [...prevVals];\n      newArr[index] = value;\n      return newArr;\n    });\n  };\n\n  const markComplete = () => {\n    dispatch({\n      type: ActionTypes.completePuzzle,\n      payload: \"FANTASYWALL\"\n    });\n  };\n\n  const validate = e => {\n    e.preventDefault();\n\n    if (inputs[0].toLowerCase() === \"n3\" && inputs[1].toLowerCase() === \"i6\" && inputs[2].toLowerCase() === \"u5\") {\n      setState(\"SUCCESS\");\n      markComplete();\n    } else {\n      setState(\"FAILURE\");\n      timeoutRef.current = setTimeout(() => {\n        setState(\"INITIAL\");\n      }, 2500);\n    }\n  };\n\n  useEffect(() => () => timeoutRef.current && clearTimeout(timeoutRef.current), []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(InteractiveImage, {\n    magnifier: true,\n    animationPlay: true,\n    src: images[state]\n  }, /*#__PURE__*/React.createElement(InputContainer, {\n    inputBg: isPuzzleComplete ? colors.SUCCESS : state === \"FAILURE\" ? colors.FAILURE : \"#fff\"\n  }, /*#__PURE__*/React.createElement(\"p\", null, \"Grid Code:\"), /*#__PURE__*/React.createElement(\"input\", {\n    value: inputs[0],\n    onChange: e => {\n      setInput(0, e.target.value);\n    },\n    placeholder: \"A1\",\n    disabled: isPuzzleComplete\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    value: inputs[1],\n    onChange: e => {\n      setInput(1, e.target.value);\n    },\n    placeholder: \"A1\",\n    disabled: isPuzzleComplete\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    value: inputs[2],\n    onChange: e => {\n      setInput(2, e.target.value);\n    },\n    placeholder: \"A1\",\n    disabled: isPuzzleComplete\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    onClick: validate,\n    disabled: isPuzzleComplete\n  }, \"Submit\"), /*#__PURE__*/React.createElement(Button.IconButton, {\n    onClick: toggleHint\n  }, state === \"HINT\" ? /*#__PURE__*/React.createElement(AiOutlineCloseCircle, null) : /*#__PURE__*/React.createElement(AiOutlineInfoCircle, null)))));\n}","map":{"version":3,"sources":["/Users/raghavsethi/Desktop/mappedin/software/webspring/src/components/panels/fantasy-wall.js"],"names":["React","useContext","useState","useEffect","useRef","InteractiveImage","AiOutlineInfoCircle","AiOutlineCloseCircle","StateContext","ActionTypes","styled","Button","InputContainer","form","props","inputBg","images","SUCCESS","FAILURE","INITIAL","HINT","colors","FantasyWall","state","completedPuzzles","dispatch","isPuzzleComplete","includes","setState","toggleHint","e","preventDefault","prevVal","inputs","_setInput","timeoutRef","setInput","index","value","prevVals","newArr","markComplete","type","completePuzzle","payload","validate","toLowerCase","current","setTimeout","clearTimeout","target"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect, useRef } from \"react\";\nimport InteractiveImage from \"../shared/interactive-image\";\nimport { AiOutlineInfoCircle, AiOutlineCloseCircle } from \"react-icons/ai\";\nimport { StateContext, ActionTypes } from \"../util/useApplicationState\";\nimport styled from \"styled-components\";\nimport Button from \"../shared/button\";\n\nconst InputContainer = styled.form`\n  width: 100%;\n  display: grid;\n  grid-template: 1fr / max-content repeat(3, 1fr) max-content max-content;\n  grid-gap: clamp(0px, 2.5%, 16px);\n\n  input {\n    text-transform: uppercase;\n    background-color: ${(props) => props.inputBg ?? \"#fff\"};\n    color: #000;\n  }\n\n  p {\n    display: inline-flex;\n    align-items: center;\n  }\n`;\n\nconst images = {\n  SUCCESS: \"/office/evr_square.jpg\",\n  FAILURE: \"/ui/dog_shake.gif\",\n  INITIAL: \"/office/FantasyMapEdited.jpg\",\n  HINT: \"/office/morse_scroll_minimal.png\",\n};\n\nconst colors = {\n  SUCCESS: \"#30E5A5\",\n  FAILURE: \"#F63654\",\n};\n\nexport default function FantasyWall() {\n  const {\n    state: { completedPuzzles },\n    dispatch,\n  } = useContext(StateContext);\n\n  const isPuzzleComplete = completedPuzzles.includes(\"FANTASYWALL\");\n\n  const [state, setState] = useState(isPuzzleComplete ? \"SUCCESS\" : \"INITIAL\"); //INITIAL, SUCCESS, FAILURE, HINT\n\n  const toggleHint = (e) => {\n    e.preventDefault();\n    setState((prevVal) => {\n      if (prevVal === \"HINT\") {\n        return isPuzzleComplete ? \"SUCCESS\" : \"INITIAL\";\n      }\n      return \"HINT\";\n    });\n  };\n\n  const [inputs, _setInput] = useState([\"\", \"\", \"\"]);\n\n  const timeoutRef = useRef();\n\n  const setInput = (index, value) => {\n    _setInput((prevVals) => {\n      const newArr = [...prevVals];\n      newArr[index] = value;\n      return newArr;\n    });\n  };\n\n  const markComplete = () => {\n    dispatch({ type: ActionTypes.completePuzzle, payload: \"FANTASYWALL\" });\n  };\n\n  const validate = (e) => {\n    e.preventDefault();\n\n    if (\n      inputs[0].toLowerCase() === \"n3\" &&\n      inputs[1].toLowerCase() === \"i6\" &&\n      inputs[2].toLowerCase() === \"u5\"\n    ) {\n      setState(\"SUCCESS\");\n      markComplete();\n    } else {\n      setState(\"FAILURE\");\n      timeoutRef.current = setTimeout(() => {\n        setState(\"INITIAL\");\n      }, 2500);\n    }\n  };\n\n  useEffect(\n    () => () => timeoutRef.current && clearTimeout(timeoutRef.current),\n    []\n  );\n\n  return (\n    <>\n      <InteractiveImage magnifier animationPlay={true} src={images[state]}>\n        <InputContainer\n          inputBg={\n            isPuzzleComplete\n              ? colors.SUCCESS\n              : state === \"FAILURE\"\n              ? colors.FAILURE\n              : \"#fff\"\n          }\n        >\n          <p>Grid Code:</p>\n          <input\n            value={inputs[0]}\n            onChange={(e) => {\n              setInput(0, e.target.value);\n            }}\n            placeholder=\"A1\"\n            disabled={isPuzzleComplete}\n          />\n          <input\n            value={inputs[1]}\n            onChange={(e) => {\n              setInput(1, e.target.value);\n            }}\n            placeholder=\"A1\"\n            disabled={isPuzzleComplete}\n          />\n          <input\n            value={inputs[2]}\n            onChange={(e) => {\n              setInput(2, e.target.value);\n            }}\n            placeholder=\"A1\"\n            disabled={isPuzzleComplete}\n          />\n\n          <Button type=\"submit\" onClick={validate} disabled={isPuzzleComplete}>\n            Submit\n          </Button>\n          <Button.IconButton onClick={toggleHint}>\n            {state === \"HINT\" ? (\n              <AiOutlineCloseCircle />\n            ) : (\n              <AiOutlineInfoCircle />\n            )}\n          </Button.IconButton>\n        </InputContainer>\n      </InteractiveImage>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}