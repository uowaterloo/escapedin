{"ast":null,"code":"var _jsxFileName = \"/Users/raghavsethi/Desktop/mappedin/software/webspring/src/components/map-view/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { useHistory } from \"react-router-dom\";\nimport Mappedin from \"@mappedin/mappedin-js/builds/mappedin\";\nimport Keys from \"../../keys\";\nimport Spinner from \"../ui/spinner\";\nimport MappedinMap from \"./MappedinMapview\";\nimport Markers from \"./markers\";\nimport { useSequentialSelections, useMarkerManager, getLocationForPolygon, getPolygonForLocation } from \"./utils\";\nimport { Wrapper, Row, LoadingScreen, StyledStatusBar, InterfaceContainer } from \"./index.style\";\nconst SelectionOrder = [\"5f529bb1b20a327b7a000001\", \"5b1a84ed97e366793c000091\" //\"5f529c43b20a327b7a00000d\",\n]; //5f529bb1b20a327b7a000001 values wall\n//5f529c43b20a327b7a00000d pet wall\n//5b1a84ed97e366793c000091 server room\n//5b196e3b97e366793c000007 hongwei's office\n\nconst OfficePasscode = \"034611\";\nconst HongweiOfficeID = \"5b196e3b97e366793c000007\";\nexport default function MapScreen() {\n  var _sdkData$mapview, _sdkData$mapview$venu;\n\n  const [isFullyLoaded, setFullyLoaded] = React.useState(false);\n  const [selectedMap, setSelectedMap] = React.useState(null);\n  const [sdkData, setSdkData] = React.useState(null);\n  const [selectedLocation, setSelectedLocation] = React.useState(null);\n  const [navigationNodes, setNavigationNodes] = React.useState([]);\n  const history = useHistory();\n  const markers = [{\n    key: \"fantasy-wall\",\n    location: \"5f529bb1b20a327b7a000001\",\n    component: /*#__PURE__*/React.createElement(Markers.LocationRedirectMarker, {\n      onActivate: () => {\n        history.push(\"fantasy_wall\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    })\n  }, {\n    key: \"values-wall\",\n    location: \"5f529bb1b20a327b7a000001\",\n    component: /*#__PURE__*/React.createElement(Markers.LocationRedirectMarker, {\n      onActivate: () => {\n        history.push(\"values_wall\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    })\n  }, {\n    key: \"pet-wall\",\n    location: \"5f529c43b20a327b7a00000d\",\n    component: /*#__PURE__*/React.createElement(Markers.LocationRedirectMarker, {\n      onActivate: () => {\n        history.push(\"pet_wall\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }\n    })\n  }, {\n    key: \"server-room\",\n    location: \"5b1a84ed97e366793c000091\",\n    component: /*#__PURE__*/React.createElement(Markers.LocationRedirectMarker, {\n      onActivate: () => {\n        history.push(\"server_room\");\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    })\n  }];\n  const {\n    resetMarkers,\n    addMarker,\n    deleteMarker\n  } = useMarkerManager(sdkData === null || sdkData === void 0 ? void 0 : sdkData.mapview, selectedMap, markers, isFullyLoaded);\n  const [sequentialLocations, setSequentialLocations] = useSequentialSelections(SelectionOrder);\n  const options = {\n    mapview: {\n      antialias: \"AUTO\",\n      //auto apply antialiasing\n      mode: Mappedin.modes.TEST,\n      //automatically test for 3d or 2d mode\n      onDataLoaded: () => console.log(\"Data loaded\"),\n      onFirstMapLoaded: () => {\n        setFullyLoaded(true);\n        console.log(\"fully loaded\");\n      }\n    },\n    venue: { ...Keys,\n      perspective: \"Website\",\n      //pick the perspective you would like to load\n      things: {\n        //fetch some data\n        venue: [\"slug\", \"name\"],\n        maps: [\"name\", \"elevation\", \"shortName\"]\n      },\n      venue: \"410-albert\"\n    }\n  };\n  const levels = sdkData === null || sdkData === void 0 ? void 0 : (_sdkData$mapview = sdkData.mapview) === null || _sdkData$mapview === void 0 ? void 0 : (_sdkData$mapview$venu = _sdkData$mapview.venue) === null || _sdkData$mapview$venu === void 0 ? void 0 : _sdkData$mapview$venu.maps.sort((a, b) => b.elevation - a.elevation);\n  const locations = sdkData === null || sdkData === void 0 ? void 0 : sdkData.mapview.venue.locations.filter(item => item.polygons && item.polygons.length > 0).sort((a, b) => a.name.toLowerCase() < b.name.toLowerCase() ? -1 : 1);\n\n  const loadingCallback = data => {\n    setSdkData(data);\n    setSelectedMap(data.mapview.currentMap);\n    data.mapview.addInteractivePolygonsForAllLocations();\n    data.mapview.labelAllLocations();\n  };\n\n  const addNavigationNode = node => {\n    const {\n      mapview: mapView\n    } = sdkData;\n    setNavigationNodes(prevVal => {\n      if (prevVal[0]) {\n        prevVal[0].directionsTo(node, {\n          accessible: false,\n          directionsProvider: \"offline\"\n        }, function (error, directions) {\n          if (error || directions.path.length == 0) {\n            // Some kind of network error, or those two points aren't connected, or are invalid\n            return;\n          }\n\n          mapView.clearAllPolygonColors();\n\n          if (node === null || node === void 0 ? void 0 : node.polygons) {\n            mapView.setPolygonColor(node.polygons[0], 0xbf4320);\n          } else {\n            mapView.setPolygonColor(node, 0xbf4320);\n          }\n\n          if (prevVal[0].polygons) {\n            mapView.setPolygonColor(prevVal[0].polygons[0], 0xbf4320);\n          } else {\n            mapView.setPolygonColor(prevVal[0], 0xbf4320);\n          }\n\n          mapView.removeAllPaths();\n          mapView.drawPath(directions.path);\n          mapView.focusOnPath(directions.path, [node, prevVal[0]], true, 2000);\n        });\n        return [node, prevVal[0]];\n      }\n\n      return [node];\n    });\n  };\n\n  const onPolygonClicked = React.useCallback(polygonId => {\n    const location = getLocationForPolygon(polygonId, sdkData.mapview);\n    sdkData.mapview.clearAllPolygonColors();\n    sdkData.mapview.setPolygonColor(polygonId, 0xbf4320);\n    setSelectedLocation(location.id);\n    setSequentialLocations(location.id);\n  }, [sdkData, selectedMap]); //Respond to update of selected location\n\n  React.useEffect(() => {\n    console.log(selectedLocation);\n\n    if (sdkData && sdkData.mapview && selectedLocation) {\n      const polygon = getPolygonForLocation(selectedLocation, sdkData.mapview);\n\n      switch (selectedLocation) {\n        case \"5b1a817c97e366793c000080\":\n          //Da Vinci\n          const markerComponent = /*#__PURE__*/React.createElement(Markers.LocationRedirectMarker, {\n            text: \"Hello DaVinci\",\n            onActivate: () => {\n              history.push(\"/2\");\n              deleteMarker(\"da-vinci-marker\");\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 13\n            }\n          });\n          addMarker({\n            key: \"da-vinci-marker\",\n            location: \"5b1a817c97e366793c000080\",\n            component: markerComponent\n          });\n      }\n    }\n  }, [selectedLocation, sdkData]); //Respond to update of sequential locations\n\n  React.useEffect(() => {\n    if (sdkData && sequentialLocations.length > 0) {\n      sequentialLocations.forEach(locationID => {\n        const polygon = getPolygonForLocation(locationID, sdkData.mapview);\n\n        if (polygon) {\n          sdkData.mapview.setPolygonColor(polygon, 0xbf4320);\n        }\n      });\n\n      if (sequentialLocations.length === SelectionOrder.length) {\n        addMarker({\n          key: \"lock-marker\",\n          location: HongweiOfficeID,\n          component: /*#__PURE__*/React.createElement(Markers.LockMarker, {\n            passcode: OfficePasscode,\n            onCloseAction: () => {\n              deleteMarker(\"lock-marker\");\n              resetMarkers();\n            },\n            onSuccess: () => {\n              deleteMarker(\"lock-marker\");\n              resetMarkers();\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 13\n            }\n          })\n        });\n      }\n    }\n  }, [sequentialLocations, sdkData, selectedMap]); //Avoid a stale closure by wrapping the function assignment in a useEffect and callback function in useCallback\n\n  React.useEffect(() => {\n    if (sdkData && sdkData.mapview) {\n      sdkData.mapview.onPolygonClicked = onPolygonClicked;\n    }\n  }, [sdkData, onPolygonClicked]);\n\n  const onLevelChange = e => {\n    setSelectedMap(e.target.value);\n  };\n\n  const onLocationChange = e => {\n    const polygon = getPolygonForLocation(e.target.value, sdkData.mapview);\n\n    if (polygon) {\n      //setNavigationNodes([polygon]);\n      sdkData.mapview.removeAllPaths();\n      sdkData.mapview.clearAllPolygonColors();\n      sdkData.mapview.setPolygonColor(polygon, 0xbf4320);\n\n      if (polygon.map !== selectedMap) {\n        setSelectedMap(polygon.map);\n        setTimeout(() => {\n          sdkData.mapview.focusOnPolygon(polygon);\n        }, 100);\n      } else {\n        sdkData.mapview.focusOnPolygon(polygon);\n      }\n    }\n\n    setSelectedLocation(e.target.value);\n  };\n\n  return /*#__PURE__*/React.createElement(Wrapper, {\n    initial: {\n      scale: 0,\n      opacity: 0\n    },\n    animate: {\n      scale: 1,\n      opacity: 1\n    },\n    exit: {\n      scale: 0,\n      opacity: 0\n    },\n    key: \"map-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(StyledStatusBar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }\n  }), !isFullyLoaded && /*#__PURE__*/React.createElement(LoadingScreen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(InterfaceContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 11\n    }\n  }, \"Floor: \"), /*#__PURE__*/React.createElement(\"select\", {\n    key: selectedMap,\n    value: selectedMap,\n    onChange: onLevelChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 11\n    }\n  }, levels === null || levels === void 0 ? void 0 : levels.map(level => /*#__PURE__*/React.createElement(\"option\", {\n    value: level.id,\n    key: level.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 15\n    }\n  }, level.shortName)))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 11\n    }\n  }, \"Location: \"), /*#__PURE__*/React.createElement(\"select\", {\n    key: selectedLocation || \"\",\n    value: selectedLocation || \"\",\n    onChange: onLocationChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 11\n    }\n  }, locations === null || locations === void 0 ? void 0 : locations.map(location => /*#__PURE__*/React.createElement(\"option\", {\n    value: location.id,\n    key: location.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 15\n    }\n  }, location.name))))), /*#__PURE__*/React.createElement(MappedinMap, {\n    selectedMap: selectedMap,\n    options: options,\n    onLoad: loadingCallback,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/raghavsethi/Desktop/mappedin/software/webspring/src/components/map-view/index.js"],"names":["React","ReactDOM","useHistory","Mappedin","Keys","Spinner","MappedinMap","Markers","useSequentialSelections","useMarkerManager","getLocationForPolygon","getPolygonForLocation","Wrapper","Row","LoadingScreen","StyledStatusBar","InterfaceContainer","SelectionOrder","OfficePasscode","HongweiOfficeID","MapScreen","isFullyLoaded","setFullyLoaded","useState","selectedMap","setSelectedMap","sdkData","setSdkData","selectedLocation","setSelectedLocation","navigationNodes","setNavigationNodes","history","markers","key","location","component","push","resetMarkers","addMarker","deleteMarker","mapview","sequentialLocations","setSequentialLocations","options","antialias","mode","modes","TEST","onDataLoaded","console","log","onFirstMapLoaded","venue","perspective","things","maps","levels","sort","a","b","elevation","locations","filter","item","polygons","length","name","toLowerCase","loadingCallback","data","currentMap","addInteractivePolygonsForAllLocations","labelAllLocations","addNavigationNode","node","mapView","prevVal","directionsTo","accessible","directionsProvider","error","directions","path","clearAllPolygonColors","setPolygonColor","removeAllPaths","drawPath","focusOnPath","onPolygonClicked","useCallback","polygonId","id","useEffect","polygon","markerComponent","forEach","locationID","onLevelChange","e","target","value","onLocationChange","map","setTimeout","focusOnPolygon","scale","opacity","level","shortName"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { useHistory } from \"react-router-dom\";\n\nimport Mappedin from \"@mappedin/mappedin-js/builds/mappedin\";\n\nimport Keys from \"../../keys\";\nimport Spinner from \"../ui/spinner\";\nimport MappedinMap from \"./MappedinMapview\";\n\nimport Markers from \"./markers\";\n\nimport {\n  useSequentialSelections,\n  useMarkerManager,\n  getLocationForPolygon,\n  getPolygonForLocation,\n} from \"./utils\";\n\nimport {\n  Wrapper,\n  Row,\n  LoadingScreen,\n  StyledStatusBar,\n  InterfaceContainer,\n} from \"./index.style\";\n\nconst SelectionOrder = [\n  \"5f529bb1b20a327b7a000001\",\n  \"5b1a84ed97e366793c000091\",\n  //\"5f529c43b20a327b7a00000d\",\n];\n\n//5f529bb1b20a327b7a000001 values wall\n//5f529c43b20a327b7a00000d pet wall\n//5b1a84ed97e366793c000091 server room\n//5b196e3b97e366793c000007 hongwei's office\n\nconst OfficePasscode = \"034611\";\nconst HongweiOfficeID = \"5b196e3b97e366793c000007\";\n\nexport default function MapScreen() {\n  const [isFullyLoaded, setFullyLoaded] = React.useState(false);\n  const [selectedMap, setSelectedMap] = React.useState(null);\n  const [sdkData, setSdkData] = React.useState(null);\n  const [selectedLocation, setSelectedLocation] = React.useState(null);\n  const [navigationNodes, setNavigationNodes] = React.useState([]);\n\n  const history = useHistory();\n\n  const markers = [\n    {\n      key: \"fantasy-wall\",\n      location: \"5f529bb1b20a327b7a000001\",\n      component: (\n        <Markers.LocationRedirectMarker\n          onActivate={() => {\n            history.push(\"fantasy_wall\");\n          }}\n        />\n      ),\n    },\n    {\n      key: \"values-wall\",\n      location: \"5f529bb1b20a327b7a000001\",\n      component: (\n        <Markers.LocationRedirectMarker\n          onActivate={() => {\n            history.push(\"values_wall\");\n          }}\n        />\n      ),\n    },\n    {\n      key: \"pet-wall\",\n      location: \"5f529c43b20a327b7a00000d\",\n      component: (\n        <Markers.LocationRedirectMarker\n          onActivate={() => {\n            history.push(\"pet_wall\");\n          }}\n        />\n      ),\n    },\n    {\n      key: \"server-room\",\n      location: \"5b1a84ed97e366793c000091\",\n      component: (\n        <Markers.LocationRedirectMarker\n          onActivate={() => {\n            history.push(\"server_room\");\n          }}\n        />\n      ),\n    },\n  ];\n\n  const { resetMarkers, addMarker, deleteMarker } = useMarkerManager(\n    sdkData?.mapview,\n    selectedMap,\n    markers,\n    isFullyLoaded\n  );\n\n  const [sequentialLocations, setSequentialLocations] = useSequentialSelections(\n    SelectionOrder\n  );\n\n  const options = {\n    mapview: {\n      antialias: \"AUTO\", //auto apply antialiasing\n      mode: Mappedin.modes.TEST, //automatically test for 3d or 2d mode\n      onDataLoaded: () => console.log(\"Data loaded\"),\n      onFirstMapLoaded: () => {\n        setFullyLoaded(true);\n        console.log(\"fully loaded\");\n      },\n    },\n    venue: {\n      ...Keys,\n      perspective: \"Website\", //pick the perspective you would like to load\n      things: {\n        //fetch some data\n        venue: [\"slug\", \"name\"],\n        maps: [\"name\", \"elevation\", \"shortName\"],\n      },\n      venue: \"410-albert\",\n    },\n  };\n\n  const levels = sdkData?.mapview?.venue?.maps.sort(\n    (a, b) => b.elevation - a.elevation\n  );\n\n  const locations = sdkData?.mapview.venue.locations\n    .filter((item) => item.polygons && item.polygons.length > 0)\n    .sort((a, b) => (a.name.toLowerCase() < b.name.toLowerCase() ? -1 : 1));\n\n  const loadingCallback = (data) => {\n    setSdkData(data);\n    setSelectedMap(data.mapview.currentMap);\n\n    data.mapview.addInteractivePolygonsForAllLocations();\n    data.mapview.labelAllLocations();\n  };\n\n  const addNavigationNode = (node) => {\n    const { mapview: mapView } = sdkData;\n\n    setNavigationNodes((prevVal) => {\n      if (prevVal[0]) {\n        prevVal[0].directionsTo(\n          node,\n          { accessible: false, directionsProvider: \"offline\" },\n          function (error, directions) {\n            if (error || directions.path.length == 0) {\n              // Some kind of network error, or those two points aren't connected, or are invalid\n              return;\n            }\n\n            mapView.clearAllPolygonColors();\n\n            if (node?.polygons) {\n              mapView.setPolygonColor(node.polygons[0], 0xbf4320);\n            } else {\n              mapView.setPolygonColor(node, 0xbf4320);\n            }\n\n            if (prevVal[0].polygons) {\n              mapView.setPolygonColor(prevVal[0].polygons[0], 0xbf4320);\n            } else {\n              mapView.setPolygonColor(prevVal[0], 0xbf4320);\n            }\n\n            mapView.removeAllPaths();\n            mapView.drawPath(directions.path);\n            mapView.focusOnPath(\n              directions.path,\n              [node, prevVal[0]],\n              true,\n              2000\n            );\n          }\n        );\n\n        return [node, prevVal[0]];\n      }\n      return [node];\n    });\n  };\n\n  const onPolygonClicked = React.useCallback(\n    (polygonId) => {\n      const location = getLocationForPolygon(polygonId, sdkData.mapview);\n\n      sdkData.mapview.clearAllPolygonColors();\n      sdkData.mapview.setPolygonColor(polygonId, 0xbf4320);\n      setSelectedLocation(location.id);\n      setSequentialLocations(location.id);\n    },\n    [sdkData, selectedMap]\n  );\n  //Respond to update of selected location\n\n  React.useEffect(() => {\n    console.log(selectedLocation);\n\n    if (sdkData && sdkData.mapview && selectedLocation) {\n      const polygon = getPolygonForLocation(selectedLocation, sdkData.mapview);\n\n      switch (selectedLocation) {\n        case \"5b1a817c97e366793c000080\":\n          //Da Vinci\n\n          const markerComponent = (\n            <Markers.LocationRedirectMarker\n              text=\"Hello DaVinci\"\n              onActivate={() => {\n                history.push(\"/2\");\n                deleteMarker(\"da-vinci-marker\");\n              }}\n            />\n          );\n\n          addMarker({\n            key: \"da-vinci-marker\",\n            location: \"5b1a817c97e366793c000080\",\n            component: markerComponent,\n          });\n      }\n    }\n  }, [selectedLocation, sdkData]);\n\n  //Respond to update of sequential locations\n  React.useEffect(() => {\n    if (sdkData && sequentialLocations.length > 0) {\n      sequentialLocations.forEach((locationID) => {\n        const polygon = getPolygonForLocation(locationID, sdkData.mapview);\n\n        if (polygon) {\n          sdkData.mapview.setPolygonColor(polygon, 0xbf4320);\n        }\n      });\n\n      if (sequentialLocations.length === SelectionOrder.length) {\n        addMarker({\n          key: \"lock-marker\",\n          location: HongweiOfficeID,\n          component: (\n            <Markers.LockMarker\n              passcode={OfficePasscode}\n              onCloseAction={() => {\n                deleteMarker(\"lock-marker\");\n                resetMarkers();\n              }}\n              onSuccess={() => {\n                deleteMarker(\"lock-marker\");\n                resetMarkers();\n              }}\n            />\n          ),\n        });\n      }\n    }\n  }, [sequentialLocations, sdkData, selectedMap]);\n\n  //Avoid a stale closure by wrapping the function assignment in a useEffect and callback function in useCallback\n  React.useEffect(() => {\n    if (sdkData && sdkData.mapview) {\n      sdkData.mapview.onPolygonClicked = onPolygonClicked;\n    }\n  }, [sdkData, onPolygonClicked]);\n\n  const onLevelChange = (e) => {\n    setSelectedMap(e.target.value);\n  };\n\n  const onLocationChange = (e) => {\n    const polygon = getPolygonForLocation(e.target.value, sdkData.mapview);\n\n    if (polygon) {\n      //setNavigationNodes([polygon]);\n      sdkData.mapview.removeAllPaths();\n      sdkData.mapview.clearAllPolygonColors();\n      sdkData.mapview.setPolygonColor(polygon, 0xbf4320);\n\n      if (polygon.map !== selectedMap) {\n        setSelectedMap(polygon.map);\n        setTimeout(() => {\n          sdkData.mapview.focusOnPolygon(polygon);\n        }, 100);\n      } else {\n        sdkData.mapview.focusOnPolygon(polygon);\n      }\n    }\n\n    setSelectedLocation(e.target.value);\n  };\n\n  return (\n    <Wrapper\n      initial={{ scale: 0, opacity: 0 }}\n      animate={{ scale: 1, opacity: 1 }}\n      exit={{ scale: 0, opacity: 0 }}\n      key=\"map-container\"\n    >\n      <StyledStatusBar />\n      {!isFullyLoaded && (\n        <LoadingScreen>\n          <Spinner />\n        </LoadingScreen>\n      )}\n\n      <InterfaceContainer>\n        <Row>\n          <p>Floor: </p>\n          <select\n            key={selectedMap}\n            value={selectedMap}\n            onChange={onLevelChange}\n          >\n            {levels?.map((level) => (\n              <option value={level.id} key={level.id}>\n                {level.shortName}\n              </option>\n            ))}\n          </select>\n        </Row>\n        <Row>\n          <p>Location: </p>\n          <select\n            key={selectedLocation || \"\"}\n            value={selectedLocation || \"\"}\n            onChange={onLocationChange}\n          >\n            {locations?.map((location) => (\n              <option value={location.id} key={location.id}>\n                {location.name}\n              </option>\n            ))}\n          </select>\n        </Row>\n      </InterfaceContainer>\n\n      <MappedinMap\n        selectedMap={selectedMap}\n        options={options}\n        onLoad={loadingCallback}\n      />\n    </Wrapper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}