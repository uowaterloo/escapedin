{"ast":null,"code":"var _jsxFileName = \"/Users/raghavsethi/Desktop/mappedin/software/webspring/src/components/apps/map-view/index.js\";\nimport React, { useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Mappedin from \"@mappedin/mappedin-js/builds/mappedin\";\nimport Keys from \"../../../keys\";\nimport Spinner from \"../../shared/spinner\";\nimport MappedinMap from \"./MappedinMapview\";\nimport Markers from \"./markers\";\nimport { useSequentialSelections, useMarkerManager, getLocationForPolygon, getPolygonForLocation } from \"./utils\";\nimport { Wrapper, LoadingScreen, StyledStatusBar } from \"./index.style\";\nimport { StateContext, ActionTypes } from \"../../util/useApplicationState\";\nconst SelectionOrder = [\"5b1a820697e366793c000083\", //ptolemy\n\"5b1a81db97e366793c000081\", //mercator\n\"5b1a817c97e366793c000080\", //da vinci\n\"5b1a814f97e366793c00007f\", //tomlinson\n\"5b1a821c97e366793c000084\", //massey\n\"5b1a81f097e366793c000082\" //ortelius\n]; //5f529bb1b20a327b7a000001 values wall\n//5f529c43b20a327b7a00000d pet wall\n//5b1a84ed97e366793c000091 server room\n//5b196e3b97e366793c000007 hongwei's office\n\nexport default function MapScreen() {\n  const [isFullyLoaded, setFullyLoaded] = React.useState(false);\n  const [selectedMap, setSelectedMap] = React.useState(null);\n  const [sdkData, setSdkData] = React.useState(null);\n  const {\n    dispatch\n  } = useContext(StateContext);\n  const history = useHistory();\n  const markers = React.useMemo(() => [{\n    key: \"fantasy-wall\",\n    location: \"5fd2799106d5276c37000000\",\n    component: /*#__PURE__*/React.createElement(Markers.LocationRedirectMarker, {\n      onActivate: () => {\n        history.push(\"fantasy_wall\");\n      }\n    })\n  }, {\n    key: \"values-wall\",\n    location: \"5f529bb1b20a327b7a000001\",\n    component: /*#__PURE__*/React.createElement(Markers.LocationRedirectMarker, {\n      onActivate: () => {\n        history.push(\"values_wall\");\n      }\n    })\n  }, {\n    key: \"pet-wall\",\n    location: \"5f529c43b20a327b7a00000d\",\n    component: /*#__PURE__*/React.createElement(Markers.LocationRedirectMarker, {\n      onActivate: () => {\n        history.push(\"pet_wall\");\n      }\n    })\n  }, {\n    key: \"server-room\",\n    location: \"5b1a84ed97e366793c000091\",\n    component: /*#__PURE__*/React.createElement(Markers.LocationRedirectMarker, {\n      onActivate: () => {\n        history.push(\"door_puzzle\");\n      }\n    })\n  }, {\n    key: \"bookcase\",\n    location: \"5b1a834697e366793c000087\",\n    component: /*#__PURE__*/React.createElement(Markers.LocationRedirectMarker, {\n      onActivate: () => {\n        history.push(\"bookcase\");\n      }\n    })\n  }], [history]);\n  useMarkerManager(sdkData === null || sdkData === void 0 ? void 0 : sdkData.mapview, selectedMap, markers, isFullyLoaded);\n  const [sequentialLocations, setSequentialLocations] = useSequentialSelections(SelectionOrder);\n  const options = {\n    mapview: {\n      antialias: \"AUTO\",\n      //auto apply antialiasing\n      mode: Mappedin.modes.TEST,\n      //automatically test for 3d or 2d mode\n      onFirstMapLoaded: () => {\n        setFullyLoaded(true);\n      }\n    },\n    venue: { ...Keys,\n      perspective: \"Website\",\n      //pick the perspective you would like to load\n      things: {\n        //fetch some data\n        venue: [\"slug\", \"name\"],\n        maps: [\"name\", \"elevation\", \"shortName\"]\n      },\n      venue: \"410-albert\"\n    }\n  };\n\n  const loadingCallback = data => {\n    setSdkData(data);\n    setSelectedMap(data.mapview.currentMap);\n    data.mapview.addInteractivePolygonsForAllLocations();\n    data.mapview.labelAllLocations();\n  };\n\n  const onPolygonClicked = React.useCallback(polygonId => {\n    const location = getLocationForPolygon(polygonId, sdkData.mapview);\n    sdkData.mapview.clearAllPolygonColors();\n    setSequentialLocations(location.id);\n  }, // eslint-disable-next-line\n  [sdkData, selectedMap]); //Respond to update of sequential locations\n\n  React.useEffect(() => {\n    if (sdkData && sequentialLocations.length > 0) {\n      sequentialLocations.forEach(locationID => {\n        const polygon = getPolygonForLocation(locationID, sdkData.mapview);\n\n        if (polygon) {\n          sdkData.mapview.setPolygonColor(polygon, 0xbf4320);\n        }\n      });\n\n      if (sequentialLocations.length === SelectionOrder.length) {\n        history.push(\"sphinx_code\");\n        dispatch({\n          type: ActionTypes.completePuzzle,\n          payload: \"MEETING_ROOM\"\n        });\n      }\n    } // eslint-disable-next-line\n\n  }, [sequentialLocations, sdkData, selectedMap, dispatch]); //Avoid a stale closure by wrapping the function assignment in a useEffect and callback function in useCallback\n\n  React.useEffect(() => {\n    if (sdkData && sdkData.mapview) {\n      sdkData.mapview.onPolygonClicked = onPolygonClicked;\n    }\n  }, [sdkData, onPolygonClicked]);\n  return /*#__PURE__*/React.createElement(Wrapper, {\n    key: \"map-container\"\n  }, /*#__PURE__*/React.createElement(StyledStatusBar, null), !isFullyLoaded && /*#__PURE__*/React.createElement(LoadingScreen, null, /*#__PURE__*/React.createElement(Spinner, null)), /*#__PURE__*/React.createElement(MappedinMap, {\n    selectedMap: selectedMap,\n    options: options,\n    onLoad: loadingCallback\n  }));\n}","map":{"version":3,"sources":["/Users/raghavsethi/Desktop/mappedin/software/webspring/src/components/apps/map-view/index.js"],"names":["React","useContext","useHistory","Mappedin","Keys","Spinner","MappedinMap","Markers","useSequentialSelections","useMarkerManager","getLocationForPolygon","getPolygonForLocation","Wrapper","LoadingScreen","StyledStatusBar","StateContext","ActionTypes","SelectionOrder","MapScreen","isFullyLoaded","setFullyLoaded","useState","selectedMap","setSelectedMap","sdkData","setSdkData","dispatch","history","markers","useMemo","key","location","component","push","mapview","sequentialLocations","setSequentialLocations","options","antialias","mode","modes","TEST","onFirstMapLoaded","venue","perspective","things","maps","loadingCallback","data","currentMap","addInteractivePolygonsForAllLocations","labelAllLocations","onPolygonClicked","useCallback","polygonId","clearAllPolygonColors","id","useEffect","length","forEach","locationID","polygon","setPolygonColor","type","completePuzzle","payload"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport Mappedin from \"@mappedin/mappedin-js/builds/mappedin\";\n\nimport Keys from \"../../../keys\";\nimport Spinner from \"../../shared/spinner\";\nimport MappedinMap from \"./MappedinMapview\";\n\nimport Markers from \"./markers\";\n\nimport {\n  useSequentialSelections,\n  useMarkerManager,\n  getLocationForPolygon,\n  getPolygonForLocation,\n} from \"./utils\";\n\nimport { Wrapper, LoadingScreen, StyledStatusBar } from \"./index.style\";\nimport { StateContext, ActionTypes } from \"../../util/useApplicationState\";\n\nconst SelectionOrder = [\n  \"5b1a820697e366793c000083\", //ptolemy\n  \"5b1a81db97e366793c000081\", //mercator\n  \"5b1a817c97e366793c000080\", //da vinci\n  \"5b1a814f97e366793c00007f\", //tomlinson\n  \"5b1a821c97e366793c000084\", //massey\n  \"5b1a81f097e366793c000082\", //ortelius\n];\n\n//5f529bb1b20a327b7a000001 values wall\n//5f529c43b20a327b7a00000d pet wall\n//5b1a84ed97e366793c000091 server room\n//5b196e3b97e366793c000007 hongwei's office\n\nexport default function MapScreen() {\n  const [isFullyLoaded, setFullyLoaded] = React.useState(false);\n  const [selectedMap, setSelectedMap] = React.useState(null);\n  const [sdkData, setSdkData] = React.useState(null);\n  const { dispatch } = useContext(StateContext);\n\n  const history = useHistory();\n\n  const markers = React.useMemo(\n    () => [\n      {\n        key: \"fantasy-wall\",\n        location: \"5fd2799106d5276c37000000\",\n        component: (\n          <Markers.LocationRedirectMarker\n            onActivate={() => {\n              history.push(\"fantasy_wall\");\n            }}\n          />\n        ),\n      },\n      {\n        key: \"values-wall\",\n        location: \"5f529bb1b20a327b7a000001\",\n        component: (\n          <Markers.LocationRedirectMarker\n            onActivate={() => {\n              history.push(\"values_wall\");\n            }}\n          />\n        ),\n      },\n      {\n        key: \"pet-wall\",\n        location: \"5f529c43b20a327b7a00000d\",\n        component: (\n          <Markers.LocationRedirectMarker\n            onActivate={() => {\n              history.push(\"pet_wall\");\n            }}\n          />\n        ),\n      },\n      {\n        key: \"server-room\",\n        location: \"5b1a84ed97e366793c000091\",\n        component: (\n          <Markers.LocationRedirectMarker\n            onActivate={() => {\n              history.push(\"door_puzzle\");\n            }}\n          />\n        ),\n      },\n      {\n        key: \"bookcase\",\n        location: \"5b1a834697e366793c000087\",\n        component: (\n          <Markers.LocationRedirectMarker\n            onActivate={() => {\n              history.push(\"bookcase\");\n            }}\n          />\n        ),\n      },\n    ],\n    [history]\n  );\n\n  useMarkerManager(sdkData?.mapview, selectedMap, markers, isFullyLoaded);\n\n  const [sequentialLocations, setSequentialLocations] = useSequentialSelections(\n    SelectionOrder\n  );\n\n  const options = {\n    mapview: {\n      antialias: \"AUTO\", //auto apply antialiasing\n      mode: Mappedin.modes.TEST, //automatically test for 3d or 2d mode\n\n      onFirstMapLoaded: () => {\n        setFullyLoaded(true);\n      },\n    },\n    venue: {\n      ...Keys,\n      perspective: \"Website\", //pick the perspective you would like to load\n      things: {\n        //fetch some data\n        venue: [\"slug\", \"name\"],\n        maps: [\"name\", \"elevation\", \"shortName\"],\n      },\n      venue: \"410-albert\",\n    },\n  };\n\n  const loadingCallback = (data) => {\n    setSdkData(data);\n    setSelectedMap(data.mapview.currentMap);\n\n    data.mapview.addInteractivePolygonsForAllLocations();\n    data.mapview.labelAllLocations();\n  };\n\n  const onPolygonClicked = React.useCallback(\n    (polygonId) => {\n      const location = getLocationForPolygon(polygonId, sdkData.mapview);\n\n      sdkData.mapview.clearAllPolygonColors();\n      setSequentialLocations(location.id);\n    },\n    // eslint-disable-next-line\n    [sdkData, selectedMap]\n  );\n\n  //Respond to update of sequential locations\n  React.useEffect(() => {\n    if (sdkData && sequentialLocations.length > 0) {\n      sequentialLocations.forEach((locationID) => {\n        const polygon = getPolygonForLocation(locationID, sdkData.mapview);\n        if (polygon) {\n          sdkData.mapview.setPolygonColor(polygon, 0xbf4320);\n        }\n      });\n\n      if (sequentialLocations.length === SelectionOrder.length) {\n        history.push(\"sphinx_code\");\n        dispatch({ type: ActionTypes.completePuzzle, payload: \"MEETING_ROOM\" });\n      }\n    }\n    // eslint-disable-next-line\n  }, [sequentialLocations, sdkData, selectedMap, dispatch]);\n\n  //Avoid a stale closure by wrapping the function assignment in a useEffect and callback function in useCallback\n  React.useEffect(() => {\n    if (sdkData && sdkData.mapview) {\n      sdkData.mapview.onPolygonClicked = onPolygonClicked;\n    }\n  }, [sdkData, onPolygonClicked]);\n\n  return (\n    <Wrapper key=\"map-container\">\n      <StyledStatusBar />\n      {!isFullyLoaded && (\n        <LoadingScreen>\n          <Spinner />\n        </LoadingScreen>\n      )}\n\n      <MappedinMap\n        selectedMap={selectedMap}\n        options={options}\n        onLoad={loadingCallback}\n      />\n    </Wrapper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}