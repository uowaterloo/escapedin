import{P as PubSub,D as DebugUICheckbox,b as DebugUIColorPicker,c as DebugUIScalarSlider,d as DebugUIButton,e as DebugUIDropdown,_ as _objectSpread2}from"./Mappedin.PubSub-90b16069.js";import{Color,Matrix4,Matrix3,Vector3,Vector4,Vector2,PerspectiveCamera}from"three";import mapboxgl from"@mappedin/mapbox-gl";var BACKGROUND_VERTEX_SHADER="attribute vec2 position;varying vec2 texcoord;void main(){gl_Position=vec4(position*vec2(2.)-vec2(1.),0.9999999999999,1.);texcoord=position;}",BACKGROUND_FRAGMENT_SHADER="uniform highp vec4 color;uniform highp vec4 color2;varying highp vec2 texcoord;void main(){highp vec3 finalColor=mix(color.rgb*color.a,color2.rgb*color2.a,texcoord.y);highp float finalAlpha=mix(color.a,color2.a,texcoord.y);gl_FragColor=vec4(finalColor,finalAlpha);}",FILL_VERTEX_SHADER="attribute vec2 a_pos;uniform mat4 worldToClip;uniform mat4 mapboxModelToWorld;void main(){vec4 worldPosition=mapboxModelToWorld*vec4(a_pos,0.,1.);gl_Position=worldToClip*worldPosition;}",FILL_FRAGMENT_SHADER="uniform highp vec4 color;uniform highp float opacity;void main(){highp float alpha=color.a*opacity;gl_FragColor=vec4(color.rgb,1.0)*alpha;}",LINE_VERTEX_SHADER="\n#define scale 0.015873016\nattribute vec2 a_pos_normal;attribute vec4 a_data;uniform mat4 u_matrix;uniform mediump float u_ratio;uniform vec2 u_units_to_pixels;uniform lowp float u_device_pixel_ratio;uniform mediump float u_gapwidth;uniform lowp float u_offset;uniform mediump float u_width;varying vec2 v_normal;varying vec2 v_width2;varying float v_gamma_scale;varying highp float v_linesofar;float random(vec2 st){return fract(sin(dot(st,vec2(12.9898,78.233)))*43758.5453123);}void main(){mediump float gapwidth=u_gapwidth;lowp float offset=u_offset;mediump float width=u_width;float ANTIALIASING=1.0/u_device_pixel_ratio/2.0;vec2 a_extrude=a_data.xy-128.0;float a_direction=mod(a_data.z,4.0)-1.0;v_linesofar=(floor(a_data.z/4.0)+a_data.w*64.0)*2.0;vec2 pos=floor(a_pos_normal*0.5);mediump vec2 normal=a_pos_normal-2.0*pos;normal.y=normal.y*2.0-1.0;v_normal=normal;gapwidth=gapwidth/2.0;float halfwidth=width/2.0;offset=-1.0*offset;float inset=gapwidth+(gapwidth>0.0 ? ANTIALIASING : 0.0);float outset=gapwidth+halfwidth*(gapwidth>0.0 ? 2.0 : 1.0)+(halfwidth==0.0 ? 0.0 : ANTIALIASING);mediump vec2 dist=outset*a_extrude*scale;mediump float u=0.5*a_direction;mediump float t=1.0-abs(u);mediump vec2 offset2=offset*a_extrude*scale*normal.y*mat2(t,-u,u,t);vec4 projected_extrude=u_matrix*vec4(dist/u_ratio,0.0,0.0);gl_Position=u_matrix*vec4(pos+offset2/u_ratio,0.0,1.0)+projected_extrude;float extrude_length_without_perspective=length(dist);float extrude_length_with_perspective=length(projected_extrude.xy/gl_Position.w*u_units_to_pixels);v_gamma_scale=extrude_length_without_perspective/extrude_length_with_perspective;v_width2=vec2(outset,inset);}",LINE_FRAGMENT_SHADER="uniform lowp float u_device_pixel_ratio;uniform highp vec4 u_color;uniform lowp float u_blur;uniform lowp float u_opacity;varying highp vec2 v_width2;varying highp vec2 v_normal;varying highp float v_gamma_scale;void main(){highp vec4 color=u_color;lowp float blur=u_blur;lowp float opacity=u_opacity;highp float dist=length(v_normal)*v_width2.s;highp float blur2=(blur+1.0/u_device_pixel_ratio)*v_gamma_scale;highp float alpha=clamp(min(dist-(v_width2.t-blur2),v_width2.s-dist)/blur2,0.0,1.0);gl_FragColor=color*(alpha*opacity);}",SYMBOL_SDF_VERTEX_SHADER="precision highp float;vec2 unpack_opacity(const float packedOpacity){int intOpacity=int(packedOpacity)/2;return vec2(float(intOpacity)/127.0,mod(packedOpacity,2.0));}const float PI=3.141592653589793;attribute vec4 a_pos_offset;attribute vec4 a_data;attribute vec3 a_projected_pos;attribute float a_fade_opacity;uniform bool u_is_size_zoom_constant;uniform bool u_is_size_feature_constant;uniform highp float u_size_t;uniform highp float u_size;uniform mat4 u_matrix;uniform mat4 u_label_plane_matrix;uniform mat4 u_coord_matrix;uniform bool u_is_text;uniform bool u_pitch_with_map;uniform bool u_rotate_symbol;uniform highp float u_aspect_ratio;uniform highp float u_camera_to_center_distance;uniform float u_fade_change;uniform vec2 u_texsize;varying vec2 v_data0;varying vec3 v_data1;void main(){vec2 a_pos=a_pos_offset.xy;vec2 a_offset=a_pos_offset.zw;vec2 a_tex=a_data.xy;vec2 a_size=a_data.zw;highp float segment_angle=-a_projected_pos[2];float size;if(!u_is_size_zoom_constant&&!u_is_size_feature_constant){size=mix(a_size[0],a_size[1],u_size_t)/256.0;}else if(u_is_size_zoom_constant&&!u_is_size_feature_constant){size=a_size[0]/256.0;}else if(!u_is_size_zoom_constant&&u_is_size_feature_constant){size=u_size;}else{size=u_size;}vec4 projectedPoint=u_matrix*vec4(a_pos,0,1);highp float camera_to_anchor_distance=projectedPoint.w;highp float distance_ratio=u_pitch_with_map ?camera_to_anchor_distance/u_camera_to_center_distance :u_camera_to_center_distance/camera_to_anchor_distance;highp float perspective_ratio=clamp(0.5+0.5*distance_ratio,0.0,4.0);size*=perspective_ratio;float fontScale=u_is_text ? size/24.0 : size;highp float symbol_rotation=0.0;if(u_rotate_symbol){vec4 offsetProjectedPoint=u_matrix*vec4(a_pos+vec2(1,0),0,1);vec2 a=projectedPoint.xy/projectedPoint.w;vec2 b=offsetProjectedPoint.xy/offsetProjectedPoint.w;symbol_rotation=atan((b.y-a.y)/u_aspect_ratio,b.x-a.x);}highp float angle_sin=sin(segment_angle+symbol_rotation);highp float angle_cos=cos(segment_angle+symbol_rotation);mat2 rotation_matrix=mat2(angle_cos,-1.0*angle_sin,angle_sin,angle_cos);vec4 projected_pos=u_label_plane_matrix*vec4(a_projected_pos.xy,0.0,1.0);gl_Position=u_coord_matrix*vec4(projected_pos.xy/projected_pos.w+rotation_matrix*(a_offset/32.0*fontScale),0.0,1.0);float gamma_scale=gl_Position.w;vec2 tex=a_tex/u_texsize;vec2 fade_opacity=unpack_opacity(a_fade_opacity);float fade_change=fade_opacity[1]>0.5 ? u_fade_change :-u_fade_change;float interpolated_fade_opacity=max(0.0,min(1.0,fade_opacity[0]+fade_change));v_data0=vec2(tex.x,tex.y);v_data1=vec3(gamma_scale,size,interpolated_fade_opacity);}",SYMBOL_SDF_FRAGMENT_SHADER="precision mediump float;\n#define SDF_PX 8.0\nuniform bool u_is_halo;uniform sampler2D u_texture;uniform highp float u_gamma_scale;uniform lowp float u_device_pixel_ratio;uniform bool u_is_text;varying vec2 v_data0;varying vec3 v_data1;uniform highp vec4 u_fill_color;uniform highp vec4 u_halo_color;uniform lowp float u_opacity;uniform lowp float u_halo_width;uniform lowp float u_halo_blur;void main(){highp vec4 fill_color=u_fill_color;highp vec4 halo_color=u_halo_color;lowp float opacity=u_opacity;lowp float halo_width=u_halo_width;lowp float halo_blur=u_halo_blur;float EDGE_GAMMA=0.105/u_device_pixel_ratio;vec2 tex=v_data0.xy;float gamma_scale=v_data1.x;gamma_scale/=5000.;float size=v_data1.y;float fade_opacity=v_data1[2];float fontScale=u_is_text ? size/24.0 : size;lowp vec4 color=fill_color;highp float gamma=EDGE_GAMMA/(fontScale*u_gamma_scale);lowp float buff=(256.0-64.0)/256.0;if(u_is_halo){color=halo_color;gamma=(halo_blur*1.19/SDF_PX+EDGE_GAMMA)/(fontScale*u_gamma_scale);buff=(6.0-halo_width/fontScale)/SDF_PX;}tex.y=1.0-tex.y;lowp float dist=texture2D(u_texture,tex).a;highp float gamma_scaled=gamma*gamma_scale;highp float alpha=smoothstep(buff-gamma_scaled,buff+gamma_scaled,dist);gl_FragColor=color*(alpha*opacity*fade_opacity);gl_FragColor=color*(alpha*opacity);}";const EXTENT=8192;const DEBUG_UI_CATEGORY="Mapbox Outdoor Context",DEBUG_UI_CATEGORY_STYLE="Mapbox Outdoor Context Style",OUTDOOR_CONTEXT_HEIGHT=-50;class MockMap{constructor({context:context,transform:transform}){this._maxTileCacheSize=null,this._fadeDuration=300,this.style=null,this.painter=new MockPainter({context:context,transform:transform}),this._requestManager=new mapboxgl.RequestManager}setStyle(style){this.style=style,this.painter.style=style,this.style.painter=this.painter}destroy(){this.painter.destroy(),Object.setPrototypeOf(this,null)}_getMapId(){return 1}}class MockPainter{constructor({context:context,transform:transform}){this._tileTextures={},this.context=context,this.transform=transform}get width(){return this.transform.width}get height(){return this.transform.height}destroy(){Object.setPrototypeOf(this,null)}getTileTexture(size){const textures=this._tileTextures[size];return textures&&textures.length>0?textures.pop():null}saveTileTexture(texture){const textures=this._tileTextures[texture.size[0]];textures?textures.push(texture):this._tileTextures[texture.size[0]]=[texture]}}class MockTransform{constructor({lngLat:lngLat,lngLatInMapSpace:lngLatInMapSpace,mapScale:mapScale,mapRotation:mapRotation,viewportSize:viewportSize}){this._changed=!0,this._inverseCameraProjection=new Matrix4,this._mercator=null,this._sdkToMercator=null,this._sinRotation=null,this._cosRotation=null,this.tileSize=512,this._lngLat=lngLat,this._lngLatInMapSpace=lngLatInMapSpace,this._mapScale=mapScale,this._mapRotation=mapRotation,this._viewportSize=viewportSize,this._mercatorToWebSDK=new Matrix4,this._mercatorToWebSDKVector=new Matrix3,this._webSDKToMercator=new Matrix4,this.center=mapboxgl.MercatorCoordinate.fromLngLat(this._lngLat,0),this._recalculate()}setLngLat(lngLat,lngLatInMapSpace){this._lngLat=lngLat,this._lngLatInMapSpace=lngLatInMapSpace,this._changed=!0}setMapScale(mapScale){this._mapScale=mapScale,this._changed=!0}setMapRotation(mapRotation){this._mapRotation=mapRotation,this._changed=!0}setViewportSize(viewportSize){this._viewportSize=viewportSize}updateFromCamera(camera){this._changed&&this._recalculate(),camera.updateProjectionMatrix(),this._inverseCameraProjection.multiplyMatrices(camera.projectionMatrix,camera.matrixWorldInverse),this._inverseCameraProjection.getInverse(this._inverseCameraProjection),this.cameraToCenterDistance=.5/Math.tan(camera.fov/2)*this._viewportSize.height,this.center=this._pointCoordinate(0,0)}_recalculate(){this._mercator=mapboxgl.MercatorCoordinate.fromLngLat(this._lngLat,0),this._sdkToMercator=this._mercator.meterInMercatorCoordinateUnits()/this._mapScale,this._sinRotation=Math.sin(this._mapRotation),this._cosRotation=Math.cos(this._mapRotation),this._changed=!1,this._webSDKToMercator.makeTranslation(-this._lngLatInMapSpace.x,-this._lngLatInMapSpace.y,0),this._webSDKToMercator.premultiply((new Matrix4).makeRotationZ(this._mapRotation)),this._webSDKToMercator.premultiply((new Matrix4).makeScale(this._sdkToMercator,-this._sdkToMercator,1)),this._webSDKToMercator.premultiply((new Matrix4).makeTranslation(this._mercator.x,this._mercator.y,this._mercator.z)),this._mercatorToWebSDK.makeTranslation(-this._mercator.x,-this._mercator.y,-this._mercator.z),this._mercatorToWebSDK.premultiply((new Matrix4).makeScale(1/this._sdkToMercator,-1/this._sdkToMercator,1)),this._mercatorToWebSDK.premultiply((new Matrix4).makeRotationZ(-this._mapRotation)),this._mercatorToWebSDK.premultiply((new Matrix4).makeTranslation(this._lngLatInMapSpace.x,this._lngLatInMapSpace.y,0)),this._mercatorToWebSDKVector.setFromMatrix4(this._mercatorToWebSDK)}get webSDKToMercator(){return this._webSDKToMercator}get mercatorToWebSDK(){return this._mercatorToWebSDK}get mercatorToWebSDKVector(){return this._mercatorToWebSDKVector}webSDKCoordinatesToMercator(coords){let result=coords.clone();return result.applyMatrix4(this._webSDKToMercator),new mapboxgl.MercatorCoordinate(result.x,result.y,result.z)}mercatorCoordinatesToWebSDK(coords){let result=new Vector3(coords.x,coords.y,coords.z);return result.applyMatrix4(this._mercatorToWebSDK),result}_pointCoordinate(x,y){const worldSpaceCoordinate0=new Vector4(x,y,0,1),worldSpaceCoordinate1=new Vector4(x,y,1,1);worldSpaceCoordinate0.applyMatrix4(this._inverseCameraProjection),worldSpaceCoordinate1.applyMatrix4(this._inverseCameraProjection);const z0=worldSpaceCoordinate0.z/worldSpaceCoordinate0.w;let t=(0-z0)/(worldSpaceCoordinate1.z/worldSpaceCoordinate1.w-z0);isNaN(t)&&(t=0);const x0=worldSpaceCoordinate0.x/worldSpaceCoordinate0.w,x1=worldSpaceCoordinate1.x/worldSpaceCoordinate1.w,y0=worldSpaceCoordinate0.y/worldSpaceCoordinate0.w,resultX=x0+t*(x1-x0),resultY=y0+t*(worldSpaceCoordinate1.y/worldSpaceCoordinate1.w-y0);return this.webSDKCoordinatesToMercator(new Vector3(resultX,resultY,0))}tileMercatorPosition(unwrappedTileID){const canonical=unwrappedTileID.canonical;let scale=1/this.zoomScale(canonical.z);const unwrappedX=canonical.x+Math.pow(2,canonical.z)*unwrappedTileID.wrap;return[new mapboxgl.MercatorCoordinate(unwrappedX*scale,canonical.y*scale,0),scale]}tileWebSDKPosition(unwrappedTileID){let[tileTranslation,tileScale]=this.tileMercatorPosition(unwrappedTileID);return[this.mercatorCoordinatesToWebSDK(tileTranslation),tileScale/this._sdkToMercator,new Vector2(this._sinRotation,this._cosRotation)]}get worldSize(){return this.tileSize*this.scale}get width(){return this._viewportSize.x}get height(){return this._viewportSize.y}get zoom(){return 14.999}get scale(){return this.zoomScale(this.zoom)}zoomScale(zoom){return Math.pow(2,zoom)}scaleZoom(scale){return Math.log(scale)/Math.LN2}coveringTiles({tileSize:tileSize,minzoom:minzoom,maxzoom:maxzoom,roundZoom:roundZoom,reparseOverscaled:reparseOverscaled,renderWorldCopies:renderWorldCopies}){let z=(roundZoom?Math.round:Math.floor)(this.zoom+this.scaleZoom(this.tileSize/tileSize));const actualZ=z,numTiles=Math.pow(2,z),centerPoint=new Vector2(numTiles*this.center.x-.5,numTiles*this.center.y-.5),cornerCoords=[this._pointCoordinate(-1,-1),this._pointCoordinate(1,-1),this._pointCoordinate(1,1),this._pointCoordinate(-1,1)];return mapboxgl.tileCover(z,cornerCoords,reparseOverscaled?actualZ:z,renderWorldCopies).sort((a,b)=>centerPoint.distanceTo(a.canonical)-centerPoint.distanceTo(b.canonical))}}class TileRenderer{constructor({context:context,map:map}){this._needsReRender=!1,this.map=map,this.context=context;const gl=this.context.gl;this.tileVertexBuffer=gl.createBuffer(),gl.bindBuffer(gl.ARRAY_BUFFER,this.tileVertexBuffer),gl.bufferData(gl.ARRAY_BUFFER,new Float32Array([0,1,1,1,0,0,1,0]),gl.STATIC_DRAW),this.debugVertexBuffer=gl.createBuffer(),gl.bindBuffer(gl.ARRAY_BUFFER,this.debugVertexBuffer),gl.bufferData(gl.ARRAY_BUFFER,new Float32Array([.25,.75,.75,.75,.25,.25,.75,.25]),gl.STATIC_DRAW),this.debugShaderProgram=this._loadProgram({programName:"debugShaderProgram",vertexSource:DEBUG_VERTEX_SHADER,fragmentSource:DEBUG_FRAGMENT_SHADER,attributes:["position"],uniforms:[]}),this.backgroundShaderProgram=this._loadProgram({programName:"backgroundShaderProgram",vertexSource:BACKGROUND_VERTEX_SHADER,fragmentSource:BACKGROUND_FRAGMENT_SHADER,attributes:["position"],uniforms:["color","color2"]}),this.textureShaderProgram=this._loadProgram({programName:"textureShaderProgram",vertexSource:TEXTURE_VERTEX_SHADER,fragmentSource:TEXTURE_FRAGMENT_SHADER,attributes:["position"],uniforms:["worldToClip","tileTranslation","tileScale","tileRotation","tileTexture","tileFadeAmount"].concat(Object.keys(ANIMATION_SUITE))}),this.fillShaderProgram=this._loadProgram({programName:"fillShaderProgram",vertexSource:FILL_VERTEX_SHADER,fragmentSource:FILL_FRAGMENT_SHADER,attributes:["a_pos"],uniforms:["worldToClip","mapboxModelToWorld","color","opacity"]}),this.lineShaderProgram=this._loadProgram({programName:"lineShaderProgram",vertexSource:LINE_VERTEX_SHADER,fragmentSource:LINE_FRAGMENT_SHADER,attributes:["a_pos_normal","a_data"],uniforms:["u_gapwidth","u_offset","u_width","u_color","u_blur","u_opacity","u_matrix","u_ratio","u_units_to_pixels","u_device_pixel_ratio"]}),this.symbolSDFShaderProgram=this._loadProgram({programName:"symbolSDFShaderProgram",vertexSource:SYMBOL_SDF_VERTEX_SHADER,fragmentSource:SYMBOL_SDF_FRAGMENT_SHADER,attributes:["a_pos_offset","a_data","a_projected_pos","a_fade_opacity"],uniforms:["u_is_size_zoom_constant","u_is_size_feature_constant","u_size_t","u_size","u_matrix","u_label_plane_matrix","u_coord_matrix","u_is_text","u_pitch_with_map","u_rotate_symbol","u_aspect_ratio","u_camera_to_center_distance","u_fade_change","u_texsize","u_is_halo","u_texture","u_gamma_scale","u_device_pixel_ratio","u_is_text","u_fill_color","u_halo_color","u_opacity","u_halo_width","u_halo_blur"]}),this._worldToClip=new Matrix4,this._mercatorToWebSDK=new Matrix4,this._solipsisticStreetNameLayoutCamera=new PerspectiveCamera,this._worldToClipClamped=new Matrix4,this._overlayColor=new Color(0,0,0),this._overlayOpacity=0,this._overlayColor2=new Color(0,0,0),this._overlayOpacity2=0,this._overlayGradient=!1,this._shouldDrawDebug=!1,this._shouldDrawTiles=!0,this._styleOverride={}}_loadShader({programName:programName,type:type,source:source}){const gl=this.context.gl,shader=gl.createShader(type);if(gl.shaderSource(shader,source),gl.compileShader(shader),gl.getShaderParameter(shader,gl.COMPILE_STATUS))return shader;{let typeId;switch(type){case gl.VERTEX_SHADER:typeId="vertex shader";break;case gl.FRAGMENT_SHADER:typeId="fragment shader";break;default:typeId="unknown shader type"}const error=new Error(`error compiling ${typeId} for ${programName}: ${gl.getShaderInfoLog(shader)}`);throw gl.deleteShader(shader),error}}_loadProgram({programName:programName,vertexSource:vertexSource,fragmentSource:fragmentSource,attributes:attributes,uniforms:uniforms}){const gl=this.context.gl,vertexShader=this._loadShader({programName:programName,type:gl.VERTEX_SHADER,source:vertexSource}),fragmentShader=this._loadShader({programName:programName,type:gl.FRAGMENT_SHADER,source:fragmentSource}),shaderProgram=gl.createProgram();if(gl.attachShader(shaderProgram,vertexShader),gl.attachShader(shaderProgram,fragmentShader),gl.linkProgram(shaderProgram),!gl.getProgramParameter(shaderProgram,gl.LINK_STATUS)){const error=new Error(`error linking ${programName}: ${gl.getProgramInfoLog(shaderProgram)}`);throw gl.deleteProgram(shaderProgram),error}const attribLocations={};for(const attribute of attributes)attribLocations[attribute]=gl.getAttribLocation(shaderProgram,attribute);const uniformLocations={};for(const uniform of uniforms)uniformLocations[uniform]=gl.getUniformLocation(shaderProgram,uniform),null==uniformLocations[uniform]&&console.error("Uniform location",uniform,"not found");return{shaderProgram:shaderProgram,attribLocations:attribLocations,uniformLocations:uniformLocations}}setOverlayColor(color,opacity){this._overlayColor=color,this._overlayOpacity=opacity,this._needsReRender=!0}setOverlayColorGradient(gradient,color,opacity){this._overlayGradient=gradient,this._overlayGradient&&(this._overlayColor2=color,this._overlayOpacity2=opacity),this._needsReRender=!0}setShouldDrawTiles(shouldDrawTiles){this._shouldDrawTiles=shouldDrawTiles,this._needsReRender=!0}render({resolution:resolution,camera:camera,transform:transform,style:style}){const renderState={resolution:resolution,camera:camera,transform:transform};this._saveThreeJSVertexAttribs(renderState),this.context.setDefault(),this._needsReRender=!1,this._computeCameraMatrices(renderState);const tileIDs={};for(const sourceId in style.sourceCaches){const sourceCache=style.sourceCaches[sourceId];tileIDs[sourceId]=transform.coveringTiles({tileSize:sourceCache.getSource().tileSize,minzoom:sourceCache.getSource().minzoom,maxzoom:sourceCache.getSource().maxzoom,roundZoom:sourceCache.getSource().roundZoom,reparseOverscaled:sourceCache.getSource().reparseOverscaled})}for(const layerId of style._order){const layer=style._layers[layerId];"background"===layer.type&&this._drawBackground({renderState:renderState,styleLayer:layer})}if(this._shouldDrawTiles)for(var i=0;i<style._order.length;++i){const layerId=style._order[i],layer=style._layers[layerId];if(null!=layer.source){const sourceCache=style.sourceCaches[layer.source];let bindProgramFunction=null,unbindProgramFunction=null,drawFunction=null;switch(layer.type){case"line":bindProgramFunction=this._bindLineTileProgram,unbindProgramFunction=this._unbindLineTileProgram,drawFunction=this._drawLineTile;break;case"fill":bindProgramFunction=this._bindFillTileProgram,unbindProgramFunction=this._unbindFillTileProgram,drawFunction=this._drawFillTile;break;case"symbol":0!==layer.paint.get("text-opacity").constantOr(1)&&(bindProgramFunction=this._bindSymbolSDFTileProgram,unbindProgramFunction=this._unbindSymbolSDFTileProgram,drawFunction=this._drawSymbolSDFTile)}if(null!=bindProgramFunction){console.assert(null!=drawFunction&&null!=unbindProgramFunction),bindProgramFunction.call(this,{renderState:renderState,styleLayer:layer});for(const coord of tileIDs[layer.source]){const tile=sourceCache.getTile(coord);null==tile||null==tile.buckets&&null==tile.texture||drawFunction.call(this,{renderState:renderState,styleLayer:layer,tile:tile})}unbindProgramFunction.call(this)}else console.assert(null==drawFunction&&null==unbindProgramFunction)}}(0!==this._overlayOpacity||this._overlayGradient&&0!==this._overlayOpacity2)&&this._drawOverlay({renderState:renderState}),this._shouldDrawDebug&&this._drawDebug(renderState),this._restoreThreeJSVertexAttribs(renderState)}get needsReRender(){return this._needsReRender}dumpDebug(){const gl=this.context.gl;for(const property in gl){const param=gl.getParameter(gl[property]);null!=param&&console.warn(property,param)}if(null==this._dumpDebugDiff){this._dumpDebugDiff={};for(const property in gl){const param=gl.getParameter(gl[property]);this._dumpDebugDiff[property]=param}console.warn("GL state captured. Call `dumpDebug` again to log the diff.")}else for(const property in gl){const param=gl.getParameter(gl[property]);param!==this._dumpDebugDiff[property]&&(console.warn("Diff:",property,"was",this._dumpDebugDiff[property],"is",param),this._dumpDebugDiff[property]=param)}}getStyleOverride(layerName,property,value){if(null!=this._styleOverride[layerName]&&null!=this._styleOverride[layerName][property]){let retrievedValue=this._styleOverride[layerName][property];return"object"==typeof retrievedValue&&"object"==typeof value?_objectSpread2({},value,{},retrievedValue):retrievedValue}return value}getStyleOverrideOrDefault(style,layerName,property){if(null!=this._styleOverride[layerName]){const override=this._styleOverride[layerName][property];if(null!=override)return override}if("color"===property){let layer=style._layers[layerName],defaultColor={r:1,g:1,b:1,a:1},color=null;switch(layer.type){case"background":color=this._paintProperty(layer,"background-color",defaultColor);break;case"fill":color=this._paintProperty(layer,"fill-color",defaultColor);break;case"line":color=this._paintProperty(layer,"line-color",defaultColor);break;case"symbol":color=this._paintProperty(layer,"text-color",defaultColor)}if(null!=color)return new Color(color.r,color.g,color.b,color.a)}else if("opacity"===property){let layer=style._layers[layerName];switch(layer.type){case"background":return this._paintProperty(layer,"background-opacity",1);case"fill":return this._paintProperty(layer,"fill-opacity",1);case"line":return this._paintProperty(layer,"line-opacity",1);case"symbol":return this._paintProperty(layer,"text-opacity",1)}}}setStyleOverride(layerName,property,value){null==this._styleOverride[layerName]&&(this._styleOverride[layerName]={}),this._styleOverride[layerName][property]=value}getOverridableStyles(style){let layers={};for(const layerId in style._layers){const layer=style._layers[layerId];-1!==["line","fill","symbol","background"].indexOf(layer.type)&&(layers[layerId]=["color"])}return layers}_computeCameraMatrices(renderState){renderState.camera.updateMatrix(),renderState.camera.updateMatrixWorld(),renderState.camera.updateProjectionMatrix(),this._worldToClip.multiplyMatrices(renderState.camera.projectionMatrix,renderState.camera.matrixWorldInverse);for(const property of["aspect","far","fov","near","zoom"])this._solipsisticStreetNameLayoutCamera[property]=renderState.camera[property];this._solipsisticStreetNameLayoutCamera.position.copy(renderState.camera.position),this._solipsisticStreetNameLayoutCamera.quaternion.copy(renderState.camera.quaternion),this._solipsisticStreetNameLayoutCamera.rotation.copy(renderState.camera.rotation),this._solipsisticStreetNameLayoutCamera.position.z=Math.min(renderState.camera.position.z,2400),this._mercatorToWebSDK.copy(renderState.transform.mercatorToWebSDK)}_bindProgram({renderState:renderState,shaderProgram:shaderProgram}){const gl=this.context.gl;gl.useProgram(shaderProgram.shaderProgram),null!=shaderProgram.uniformLocations.worldToClip&&gl.uniformMatrix4fv(shaderProgram.uniformLocations.worldToClip,!1,this._worldToClip.elements),null!=shaderProgram.uniformLocations.resolution&&gl.uniformMatrix2f(shaderProgram.uniformLocations.resolution,renderState.resolution.width,renderState.resolution.height);for(const key in ANIMATION_SUITE)null!=shaderProgram.uniformLocations[key]&&ANIMATION_SUITE[key](gl,shaderProgram.uniformLocations[key])}_saveThreeJSVertexAttribs(renderState){let gl=this.context.gl;const extInstances=gl.getExtension("ANGLE_instanced_arrays");renderState.savedThreeJSVertexAttribs={};for(let i=0;i<gl.getParameter(gl.MAX_VERTEX_ATTRIBS);++i)renderState.savedThreeJSVertexAttribs[i]={enabled:gl.getVertexAttrib(i,gl.VERTEX_ATTRIB_ARRAY_ENABLED),size:gl.getVertexAttrib(i,gl.VERTEX_ATTRIB_ARRAY_SIZE),stride:gl.getVertexAttrib(i,gl.VERTEX_ATTRIB_ARRAY_STRIDE),type:gl.getVertexAttrib(i,gl.VERTEX_ATTRIB_ARRAY_TYPE),normalized:gl.getVertexAttrib(i,gl.VERTEX_ATTRIB_ARRAY_NORMALIZED),offset:gl.getVertexAttribOffset(i,gl.VERTEX_ATTRIB_ARRAY_POINTER),divisor:null!=extInstances?gl.getVertexAttrib(i,extInstances.VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE):null}}_restoreThreeJSVertexAttribs(renderState){let gl=this.context.gl;const extInstances=gl.getExtension("ANGLE_instanced_arrays");for(const index in renderState.savedThreeJSVertexAttribs){const attrib=renderState.savedThreeJSVertexAttribs[index];attrib.enabled?(gl.enableVertexAttribArray(index),gl.vertexAttribPointer(index,attrib.size,attrib.type,attrib.normalized,attrib.stride,attrib.offset)):gl.disableVertexAttribArray(index),null!=extInstances&&(null!=extInstances.vertexAttribDivisor?extInstances.vertexAttribDivisor(index,attrib.divisor):extInstances.vertexAttribDivisorANGLE(index,attrib.divisor))}}_enableVertexAttribArray(index){const gl=this.context.gl,extInstances=gl.getExtension("ANGLE_instanced_arrays");null!=extInstances&&(null!=extInstances.vertexAttribDivisor?extInstances.vertexAttribDivisor(index,0):extInstances.vertexAttribDivisorANGLE(index,0)),gl.enableVertexAttribArray(index)}_drawDebug(renderState){const gl=this.context.gl;gl.bindBuffer(gl.ARRAY_BUFFER,this.debugVertexBuffer),gl.vertexAttribPointer(this.debugShaderProgram.attribLocations.position,2,gl.FLOAT,!1,0,0);const extInstances=gl.getExtension("ANGLE_instanced_arrays");null!=extInstances&&extInstances.vertexAttribDivisorANGLE(this.debugShaderProgram.attribLocations.position,0),this._enableVertexAttribArray(this.debugShaderProgram.attribLocations.position),this._bindProgram({shaderProgram:this.debugShaderProgram,renderState:renderState}),gl.disable(gl.CULL_FACE),gl.disable(gl.DEPTH_TEST),0!==this.textureShaderProgram.attribLocations.position&&gl.disableVertexAttribArray(this.textureShaderProgram.attribLocations.position),gl.drawArrays(gl.TRIANGLE_STRIP,0,4),gl.enable(gl.CULL_FACE),gl.enable(gl.DEPTH_TEST)}_bindRasterTileProgram(renderState){const gl=this.context.gl;gl.bindBuffer(gl.ARRAY_BUFFER,this.tileVertexBuffer),gl.vertexAttribPointer(this.textureShaderProgram.attribLocations.position,2,gl.FLOAT,!1,0,0),this._enableVertexAttribArray(this.textureShaderProgram.attribLocations.position),this._bindProgram({renderState:renderState,shaderProgram:this.textureShaderProgram}),gl.disable(gl.CULL_FACE),gl.enable(gl.BLEND),gl.blendFunc(gl.SRC_ALPHA,gl.ONE_MINUS_SRC_ALPHA)}_unbindRasterTileProgram(){const gl=this.context.gl;0!==this.textureShaderProgram.attribLocations.position&&gl.disableVertexAttribArray(this.textureShaderProgram.attribLocations.position),gl.enable(gl.CULL_FACE),gl.disable(gl.BLEND)}_bindFillTileProgram({renderState:renderState,styleLayer:styleLayer}){const gl=this.context.gl;this._bindProgram({renderState:renderState,shaderProgram:this.fillShaderProgram}),gl.disable(gl.CULL_FACE),gl.depthMask(!1),gl.enable(gl.BLEND),gl.blendFunc(gl.ONE,gl.ONE_MINUS_SRC_ALPHA);const fillColor=this.getStyleOverride(styleLayer.id,"color",this._paintProperty(styleLayer,"fill-color",{r:0,g:0,b:0,a:0}));gl.uniform4f(this.fillShaderProgram.uniformLocations.color,fillColor.r,fillColor.g,fillColor.b,fillColor.a);const fillOpacity=this.getStyleOverride(styleLayer.id,"opacity",this._paintProperty(styleLayer,"fill-opacity",1));gl.uniform1f(this.fillShaderProgram.uniformLocations.opacity,fillOpacity)}_unbindFillTileProgram(){const gl=this.context.gl;gl.enable(gl.CULL_FACE),gl.depthMask(!0),gl.disable(gl.BLEND)}_bindLineTileProgram({renderState:renderState,styleLayer:styleLayer}){const gl=this.context.gl;this._bindProgram({renderState:renderState,shaderProgram:this.lineShaderProgram}),gl.disable(gl.CULL_FACE),gl.depthMask(!1),gl.enable(gl.BLEND),gl.blendFunc(gl.ONE,gl.ONE_MINUS_SRC_ALPHA);const u_gapwidth=styleLayer.paint.get("line-gap-width").evaluate();gl.uniform1f(this.lineShaderProgram.uniformLocations.u_gapwidth,u_gapwidth||0);const u_offset=styleLayer.paint.get("line-gap-width").evaluate();gl.uniform1f(this.lineShaderProgram.uniformLocations.u_offset,u_offset||0);const u_width=styleLayer.paint.get("line-width").evaluate();gl.uniform1f(this.lineShaderProgram.uniformLocations.u_width,u_width||1);const u_color=this.getStyleOverride(styleLayer.id,"color",styleLayer.paint.get("line-color").evaluate());gl.uniform4f(this.lineShaderProgram.uniformLocations.u_color,u_color.r,u_color.g,u_color.b,u_color.a||1);const u_blur=styleLayer.paint.get("line-blur").evaluate();gl.uniform1f(this.lineShaderProgram.uniformLocations.u_blur,u_blur||0);const u_opacity=this.getStyleOverride(styleLayer.id,"opacity",styleLayer.paint.get("line-opacity").evaluate());gl.uniform1f(this.lineShaderProgram.uniformLocations.u_opacity,u_opacity||1);const u_units_to_pixels=new Vector2(1/(2/renderState.resolution.width),1/(-2/renderState.resolution.height));gl.uniform2f(this.lineShaderProgram.uniformLocations.u_units_to_pixels,u_units_to_pixels.x,u_units_to_pixels.y);const u_device_pixel_ratio=window.devicePixelRatio;gl.uniform1f(this.lineShaderProgram.uniformLocations.u_device_pixel_ratio,u_device_pixel_ratio)}_unbindLineTileProgram(){const gl=this.context.gl;gl.depthMask(!0),gl.enable(gl.CULL_FACE),gl.disable(gl.BLEND)}_bindSymbolSDFTileProgram({renderState:renderState,styleLayer:styleLayer}){const gl=this.context.gl;this._bindProgram({renderState:renderState,shaderProgram:this.symbolSDFShaderProgram}),gl.disable(gl.CULL_FACE),gl.depthMask(!1),gl.enable(gl.BLEND),gl.blendFunc(gl.ONE,gl.ONE_MINUS_SRC_ALPHA);const rotateWithMap="map"===styleLayer.layout.get("text-rotation-alignment"),pitchWithMap="map"===styleLayer.layout.get("text-pitch-alignment"),alongLine=rotateWithMap&&"point"!==styleLayer.layout.get("symbol-placement"),rotateInShader=rotateWithMap&&!pitchWithMap&&!alongLine,pitchVector=new Vector4(0,0,1,0);pitchVector.applyMatrix4(renderState.camera.matrixWorldInverse),pitchVector.normalize();const u_pitch=Math.acos(pitchVector.z);gl.uniform1f(this.symbolSDFShaderProgram.uniformLocations.u_pitch,u_pitch);const u_aspect_ratio=renderState.resolution.width/renderState.resolution.height;gl.uniform1f(this.symbolSDFShaderProgram.uniformLocations.u_aspect_ratio,u_aspect_ratio);const u_camera_to_center_distance=renderState.transform.cameraToCenterDistance;gl.uniform1f(this.symbolSDFShaderProgram.uniformLocations.u_camera_to_center_distance,u_camera_to_center_distance);gl.uniform1f(this.symbolSDFShaderProgram.uniformLocations.u_gamma_scale,1),gl.uniform1i(this.symbolSDFShaderProgram.uniformLocations.u_pitch_with_map,pitchWithMap),gl.uniform1i(this.symbolSDFShaderProgram.uniformLocations.u_rotate_symbol,rotateInShader),gl.uniform1i(this.symbolSDFShaderProgram.uniformLocations.u_is_size_zoom_constant,1),gl.uniform1i(this.symbolSDFShaderProgram.uniformLocations.u_is_size_feature_constant,1),gl.uniform1i(this.symbolSDFShaderProgram.uniformLocations.u_fade_Change,1),gl.uniform1i(this.symbolSDFShaderProgram.uniformLocations.u_is_text,1),gl.uniform1f(this.symbolSDFShaderProgram.uniformLocations.u_device_pixel_ratio,window.devicePixelRatio);const u_fill_color=this.getStyleOverride(styleLayer.id,"color",this._paintProperty(styleLayer,"text-color",{r:0,g:0,b:0,a:0}));gl.uniform4f(this.symbolSDFShaderProgram.uniformLocations.u_fill_color,u_fill_color.r,u_fill_color.g,u_fill_color.b,u_fill_color.a||1);const u_halo_color=this._paintProperty(styleLayer,"halo-color",{r:0,g:0,b:0,a:0});gl.uniform4f(this.symbolSDFShaderProgram.uniformLocations.u_halo_color,u_halo_color.r,u_halo_color.g,u_halo_color.b,u_halo_color.a||1);const u_opacity=this.getStyleOverride(styleLayer.id,"opacity",this._paintProperty(styleLayer,"text-opacity",1));gl.uniform1f(this.symbolSDFShaderProgram.uniformLocations.u_opacity,u_opacity||1);const u_halo_width=this._paintProperty(styleLayer,"text-halo-width",0);gl.uniform1f(this.symbolSDFShaderProgram.uniformLocations.u_halo_width,u_halo_width||0);const u_halo_blur=this._paintProperty(styleLayer,"text-halo-blur",0);gl.uniform1f(this.symbolSDFShaderProgram.uniformLocations.u_halo_blur,u_halo_blur||0)}_unbindSymbolSDFTileProgram(){const gl=this.context.gl;gl.depthMask(!0),gl.enable(gl.CULL_FACE),gl.disable(gl.BLEND)}_paintProperty(styleLayer,propertyName,defaultValue){if(null==styleLayer.paint)return;const property=styleLayer.paint.get(propertyName);let value;return null!=(value=null!=property&&null!=property.evaluate?property.evaluate():property)?value:defaultValue}_drawBackground({renderState:renderState,styleLayer:styleLayer}){const gl=this.context.gl;gl.bindBuffer(gl.ARRAY_BUFFER,this.tileVertexBuffer),gl.vertexAttribPointer(this.backgroundShaderProgram.attribLocations.position,2,gl.FLOAT,!1,0,0),this._enableVertexAttribArray(this.backgroundShaderProgram.attribLocations.position),this._bindProgram({renderState:renderState,shaderProgram:this.backgroundShaderProgram});const color=this.getStyleOverride(styleLayer.id,"color",this._paintProperty(styleLayer,"background-color",{r:0,g:0,b:0,a:0})),opacity=this.getStyleOverride(styleLayer.id,"opacity",this._paintProperty(styleLayer,"background-opacity",1)),finalOpacity=(color.a||1)*(opacity||1);gl.uniform4f(this.backgroundShaderProgram.uniformLocations.color,color.r,color.g,color.b,finalOpacity),gl.uniform4f(this.backgroundShaderProgram.uniformLocations.color2,color.r,color.g,color.b,finalOpacity),gl.disable(gl.CULL_FACE),gl.enable(gl.BLEND),gl.blendFunc(gl.ONE,gl.ONE_MINUS_SRC_ALPHA),gl.drawArrays(gl.TRIANGLE_STRIP,0,4),gl.enable(gl.CULL_FACE),gl.disable(gl.BLEND)}_drawOverlay({renderState:renderState}){const gl=this.context.gl;gl.bindBuffer(gl.ARRAY_BUFFER,this.tileVertexBuffer),gl.vertexAttribPointer(this.backgroundShaderProgram.attribLocations.position,2,gl.FLOAT,!1,0,0),this._enableVertexAttribArray(this.backgroundShaderProgram.attribLocations.position),this._bindProgram({renderState:renderState,shaderProgram:this.backgroundShaderProgram}),gl.uniform4f(this.backgroundShaderProgram.uniformLocations.color,this._overlayColor.r,this._overlayColor.g,this._overlayColor.b,this._overlayOpacity);const secondaryColor=this._overlayGradient?this._overlayColor2:this._overlayColor,secondaryOpacity=this._overlayGradient?this._overlayOpacity2:this._overlayOpacity;gl.uniform4f(this.backgroundShaderProgram.uniformLocations.color2,secondaryColor.r,secondaryColor.g,secondaryColor.b,secondaryOpacity),gl.disable(gl.CULL_FACE),gl.enable(gl.BLEND),gl.blendFunc(gl.ONE,gl.ONE_MINUS_SRC_ALPHA),gl.drawArrays(gl.TRIANGLE_STRIP,0,4),gl.enable(gl.CULL_FACE),gl.disable(gl.BLEND)}_bindVertexAttributes(program,segment,buffer){const gl=this.context.gl,AttributeType={Int8:"BYTE",Uint8:"UNSIGNED_BYTE",Int16:"SHORT",Uint16:"UNSIGNED_SHORT",Int32:"INT",Uint32:"UNSIGNED_INT",Float32:"FLOAT"},extVAO=gl.getExtension("OES_vertex_array_object");if(null!=extVAO&&extVAO.bindVertexArrayOES(null),buffer)for(const attribute of buffer.attributes){let attributeIndex=program.attribLocations[attribute.name];null!=attributeIndex&&(this._enableVertexAttribArray(attributeIndex),gl.vertexAttribPointer(attributeIndex,attribute.components,gl[AttributeType[attribute.type]],!1,buffer.itemSize,attribute.offset+buffer.itemSize*(segment.vertexOffset||0)))}}_unbindVertexAttributes(program,buffer){const gl=this.context.gl;if(buffer)for(const attribute of buffer.attributes){let attributeIndex=program.attribLocations[attribute.name];null!=attributeIndex&&0!==attributeIndex&&gl.disableVertexAttribArray(attributeIndex)}}_getPosMatrix(renderState,tile){const unwrappedTileID=tile.tileID.toUnwrapped(),canonical=unwrappedTileID.canonical,scale=1/renderState.transform.zoomScale(canonical.z),unwrappedX=canonical.x+Math.pow(2,canonical.z)*unwrappedTileID.wrap,mapboxModelToWorld=new Matrix4;mapboxModelToWorld.premultiply((new Matrix4).makeScale(scale/EXTENT,scale/EXTENT,1)),mapboxModelToWorld.multiply(this._mercatorToWebSDK);const translationMercator=new mapboxgl.MercatorCoordinate(unwrappedX*scale,canonical.y*scale,0),translationSDK=renderState.transform.mercatorCoordinatesToWebSDK(translationMercator);return mapboxModelToWorld.premultiply((new Matrix4).makeTranslation(translationSDK.x,translationSDK.y,translationSDK.z)),mapboxModelToWorld}_drawFillTile({renderState:renderState,styleLayer:styleLayer,tile:tile}){const gl=this.context.gl,bucket=tile.getBucket(styleLayer);if(!bucket)return;bucket.upload(this.context);const indexBuffer=bucket.indexBuffer,segments=bucket.segments;let drawMode=gl.TRIANGLES;const primitiveSize={[gl.LINES]:2,[gl.TRIANGLES]:3,[gl.LINE_STRIP]:1}[drawMode],mapboxModelToWorld=this._getPosMatrix(renderState,tile);mapboxModelToWorld.premultiply((new Matrix4).makeTranslation(0,0,OUTDOOR_CONTEXT_HEIGHT)),gl.uniformMatrix4fv(this.fillShaderProgram.uniformLocations.mapboxModelToWorld,!1,mapboxModelToWorld.elements);for(const segment of segments.get())indexBuffer.bind(),bucket.layoutVertexBuffer.bind(),this._bindVertexAttributes(this.fillShaderProgram,segment,bucket.layoutVertexBuffer),gl.drawElements(drawMode,segment.primitiveLength*primitiveSize,gl.UNSIGNED_SHORT,segment.primitiveOffset*primitiveSize*2),this._unbindVertexAttributes(this.fillShaderProgram,bucket.layoutVertexBuffer)}_drawLineTile({renderState:renderState,styleLayer:styleLayer,tile:tile}){const gl=this.context.gl,bucket=tile.getBucket(styleLayer);if(!bucket)return;bucket.upload(this.context);const indexBuffer=bucket.indexBuffer,segments=bucket.segments,mapboxModelToClip=this._getPosMatrix(renderState,tile);mapboxModelToClip.premultiply((new Matrix4).makeTranslation(0,0,OUTDOOR_CONTEXT_HEIGHT)),mapboxModelToClip.premultiply(this._worldToClip),gl.uniformMatrix4fv(this.lineShaderProgram.uniformLocations.u_matrix,!1,mapboxModelToClip.elements);const u_ratio=1/function(tile,pixelValue,z){return pixelValue*(EXTENT/(tile.tileSize*Math.pow(2,z-tile.tileID.overscaledZ)))*.7}(tile,1,renderState.transform.zoom);gl.uniform1f(this.lineShaderProgram.uniformLocations.u_ratio,u_ratio);for(const segment of segments.get())indexBuffer.bind(),bucket.layoutVertexBuffer.bind(),this._bindVertexAttributes(this.lineShaderProgram,segment,bucket.layoutVertexBuffer),gl.drawElements(gl.TRIANGLES,3*segment.primitiveLength,gl.UNSIGNED_SHORT,3*segment.primitiveOffset*2),this._unbindVertexAttributes(this.lineShaderProgram,bucket.layoutVertexBuffer)}_drawSymbolSDFTile({renderState:renderState,styleLayer:styleLayer,tile:tile}){const gl=this.context.gl;tile.upload(this.context);const bucket=tile.getBucket(styleLayer);if(!bucket)return;bucket.upload(this.context);const buffers=bucket.text;if(!buffers||!buffers.segments.get().length)return;buffers.upload();const indexBuffer=buffers.indexBuffer,segments=buffers.segments,mapboxModelToClip=this._getPosMatrix(renderState,tile);mapboxModelToClip.premultiply((new Matrix4).makeTranslation(0,0,OUTDOOR_CONTEXT_HEIGHT)),mapboxModelToClip.premultiply(this._worldToClip),gl.uniformMatrix4fv(this.symbolSDFShaderProgram.uniformLocations.u_matrix,!1,mapboxModelToClip.elements);const sizeData=bucket.textSizeData,size=mapboxgl.symbolSize.evaluateSizeForZoom(sizeData,renderState.transform.zoom),atlasTexture=tile.glyphAtlasTexture,atlasInterpolation=gl.LINEAR,texSize=atlasTexture.size;gl.uniform1f(this.symbolSDFShaderProgram.uniformLocations.u_size,size?size.uSize:0),gl.uniform1f(this.symbolSDFShaderProgram.uniformLocations.u_size_t,size?size.uSizeT:0),gl.uniform2f(this.symbolSDFShaderProgram.uniformLocations.u_texsize,texSize[0],texSize[1]),gl.activeTexture(gl.TEXTURE0),atlasTexture.bind(atlasInterpolation,gl.CLAMP_TO_EDGE),gl.uniform1i(this.symbolSDFShaderProgram.uniformLocations.u_texture,0);const rotationAlignment=styleLayer.layout.get("text-rotation-alignment"),pitchAlignment=styleLayer.layout.get("text-pitch-alignment"),keepUpright=styleLayer.layout.get("text-keep-upright"),pitchWithMap="map"===pitchAlignment,alongLine="map"===rotationAlignment&&"point"!==styleLayer.layout.get("symbol-placement");let identity=new Matrix4;if(gl.uniformMatrix4fv(this.symbolSDFShaderProgram.uniformLocations.u_label_plane_matrix,!1,identity.elements),gl.uniformMatrix4fv(this.symbolSDFShaderProgram.uniformLocations.u_coord_matrix,!1,mapboxModelToClip.elements),alongLine){const mapboxModelToWorld=this._getPosMatrix(renderState,tile),tilePosition=new Vector3(0,0,0);tilePosition.applyMatrix4(mapboxModelToWorld),this._solipsisticStreetNameLayoutCamera.x=tilePosition.x,this._solipsisticStreetNameLayoutCamera.y=tilePosition.y,this._solipsisticStreetNameLayoutCamera.updateMatrix(),this._solipsisticStreetNameLayoutCamera.updateMatrixWorld(),this._solipsisticStreetNameLayoutCamera.updateProjectionMatrix(),this._worldToClipClamped.multiplyMatrices(this._solipsisticStreetNameLayoutCamera.projectionMatrix,this._solipsisticStreetNameLayoutCamera.matrixWorldInverse);const mapboxModelToClipClamped=mapboxModelToWorld;mapboxModelToClipClamped.premultiply((new Matrix4).makeTranslation(0,0,2+OUTDOOR_CONTEXT_HEIGHT)),mapboxModelToClipClamped.premultiply(this._worldToClipClamped);let fakePainter={width:this.map.painter.width/1024,height:this.map.painter.height/1024};Object.setPrototypeOf(fakePainter,this.map.painter),mapboxgl.symbolProjection.updateLineLabels(bucket,mapboxModelToClipClamped.elements,fakePainter,!0,identity.elements,mapboxModelToClipClamped.elements,pitchWithMap,keepUpright)}for(const segment of segments.get())indexBuffer.bind(),buffers.dynamicLayoutVertexBuffer.bind(),this._bindVertexAttributes(this.symbolSDFShaderProgram,segment,buffers.dynamicLayoutVertexBuffer),buffers.layoutVertexBuffer.bind(),this._bindVertexAttributes(this.symbolSDFShaderProgram,segment,buffers.layoutVertexBuffer),gl.uniform1i(this.symbolSDFShaderProgram.uniformLocations.u_is_halo,0),gl.drawElements(gl.TRIANGLES,3*segment.primitiveLength,gl.UNSIGNED_SHORT,3*segment.primitiveOffset*2),this._unbindVertexAttributes(this.symbolSDFShaderProgram,buffers.layoutVertexBuffer),this._unbindVertexAttributes(this.symbolSDFShaderProgram,buffers.dynamicLayoutVertexBuffer)}}const ANIMATION_SUITE=_objectSpread2({},{animationFallHeight:(gl,loc)=>gl.uniform4f(loc,0,0,1,1),animationTileScale:(gl,loc)=>gl.uniform4f(loc,1,1,1,1),animationFadeIn:(gl,loc)=>gl.uniform4f(loc,0,0,1,1),animationSpreadOut:(gl,loc)=>gl.uniform4f(loc,1,1,1,1)},{},(amount=>({animationTileScale:(gl,loc)=>gl.uniform4f(loc,0,1,4,5),animationFallHeight:(gl,loc)=>gl.uniform4f(loc,100,0,4,8),animationFadeIn:(gl,loc)=>gl.uniform4f(loc,1,0,4,2),animationSpreadOut:(gl,loc)=>gl.uniform4f(loc,amount,1,4,6)}))(.2)),TEXTURE_VERTEX_SHADER="\nattribute vec2 position;\nuniform mat4 worldToClip;\nuniform vec2 tileTranslation;\nuniform float tileScale;\nuniform vec2 tileRotation;\nuniform float tileFadeAmount;\nvarying highp vec2 vUv;\n\nuniform vec4 animationSpreadOut;\nuniform vec4 animationFallHeight;\nuniform vec4 animationTileScale;\n\nfloat tileHeight() {\n\tfloat suppressionRadius = animationFallHeight.y;\n\tfloat suppressionCoefficient = suppressionRadius != 0.0 ?\n\t\tclamp(length(tileTranslation) / (suppressionRadius * 2.) - suppressionRadius, 0.0, 1.0)\n\t\t: 1.0;\n\tfloat initialHeight = animationFallHeight.x * suppressionCoefficient;\n\tfloat speed = animationFallHeight.z;\n\tfloat tension = animationFallHeight.w;\n\treturn mix(initialHeight, 0.0, 1.0 - pow(1.0 - clamp(tileFadeAmount * speed, 0.0, 1.0), tension));\n}\n\nfloat tileSize() {\n\tfloat initialScale = animationTileScale.x;\n\tfloat finalScale = animationTileScale.y;\n\tfloat speed = animationTileScale.z;\n\tfloat tension = animationTileScale.w;\n\treturn mix(initialScale, finalScale, 1.0 - pow(1.0 - clamp(tileFadeAmount * speed, 0.0, 1.0), tension));\n}\n\nfloat tileSpread() {\n\tfloat initialSpread = animationSpreadOut.x;\n\tfloat finalSpread = animationSpreadOut.y;\n\tfloat speed = animationSpreadOut.z;\n\tfloat tension = animationSpreadOut.w;\n\treturn mix(initialSpread, finalSpread, 1.0 - pow(1.0 - clamp(tileFadeAmount * speed, 0.0, 1.0), tension));\n}\n\nvoid main() {\n\tfloat nx = position.x;\n\tfloat ny = -position.y;\n\tfloat s = tileRotation.x;\n\tfloat c = tileRotation.y;\n\tmat2 rotationMatrix = mat2(c, s, -s, c);\n\tvec2 rotatedPosition = rotationMatrix * vec2(nx, ny);\n\tvec2 scaleOrigin = rotationMatrix * vec2(0.5, -0.5);\n\tvec2 scaledPosition = ((rotatedPosition - scaleOrigin) * tileSize() + scaleOrigin) * tileScale;\n\tvec2 translatedPosition = scaledPosition + tileTranslation * tileSpread();\n\tvec4 homogeneousPosition = vec4(translatedPosition, tileHeight(), 1.0);\n\tgl_Position = worldToClip * homogeneousPosition;\n\tvUv = position;\n}\n",TEXTURE_FRAGMENT_SHADER="\nvarying highp vec2 vUv;\nuniform sampler2D tileTexture;\nuniform highp float tileFadeAmount;\n\nuniform highp vec4 animationFadeIn;\n\nhighp float fadeInAmount() {\n\thighp float speed = animationFadeIn.z;\n\thighp float tension = animationFadeIn.w;\n\treturn 1.0 - pow(1.0 - clamp(tileFadeAmount * speed, 0.0, 1.0), tension);\n}\n\nhighp vec4 fadeInColor(highp vec4 color) {\n\thighp float colorFadeAmount = animationFadeIn.x;\n\thighp float alphaFadeAmount = animationFadeIn.y;\n\treturn vec4(\n\t\tmix(vec3(1.0), color.rgb, mix(1.0, fadeInAmount(), colorFadeAmount)),\n\t\tmix(0.0, color.a, mix(1.0, fadeInAmount(), alphaFadeAmount))\n\t);\n}\n\nvoid main() {\n\thighp vec4 textureColor = texture2D(tileTexture, vUv * vec2(1., -1.) + vec2(0., 1.));\n\thighp vec4 color = fadeInColor(textureColor);\n\tgl_FragColor = color;\n}\n",DEBUG_VERTEX_SHADER="\nattribute vec2 position;\n\nvoid main() {\n\tgl_Position = vec4(position, 0., 1.);\n}\n",DEBUG_FRAGMENT_SHADER="\nvoid main() {\n\tgl_FragColor = vec4(0.0, 0.0, 1.0, 1.0);\n}\n";export default class{constructor({context:context,lngLat:lngLat,lngLatInMapSpace:lngLatInMapSpace,mapScale:mapScale,mapRotation:mapRotation,viewportSize:viewportSize}){this._style=null,this._mockMap=null,this._changed=!0,this._needsReRender=!1,Object.assign(this,PubSub.prototype),window.MappedinDebug||(window.MappedinDebug={}),window.MappedinDebug.mapboxgl=mapboxgl,window.MappedinDebug.mapboxOutdoorContext=this,this._dispatcher=new mapboxgl.Dispatcher(mapboxgl.getWorkerPool(),this),this._eventHandler={listens:_event=>!0,fire:event=>this._handleEvent(event)};const mapboxContext=new mapboxgl.Context(context);this._transform=new MockTransform({lngLat:lngLat,lngLatInMapSpace:lngLatInMapSpace,mapScale:mapScale,mapRotation:mapRotation,viewportSize:viewportSize}),this._mockMap=new MockMap({context:mapboxContext,transform:this._transform}),this._style=new mapboxgl.Style(this._mockMap,{}),this._style.setEventedParent(this._eventHandler,{style:this._style});const xhr=new XMLHttpRequest,me=this;xhr.onreadystatechange=function(){if(4===this.readyState&&200===this.status){const json=JSON.parse(this.responseText);me._style.loadJSON(json)}},xhr.open("GET","https://mi-tiles.mappedin.com/styles/klokantech-basic/style.json",!0),xhr.send(),this._mockMap.setStyle(this._style),this._tileRenderer=new TileRenderer({context:mapboxContext,map:this._mockMap}),this._onEvent=[],this._dispatcher.broadcast("setReferrer",mapboxgl.getReferrer())}destroy(){this._style.remove(),delete this._style,this._mockMap.destroy(),this._tileRenderer.destroy(),this._dispatcher.remove(),PubSub.prototype.destroy.call(this),Object.setPrototypeOf(this,null)}loaded(){return this._style.loaded()}update(camera){this._transform.updateFromCamera(camera);const zoom=this._transform.zoom,now=performance.now();this._style.zoomHistory.update(zoom,now);const parameters=new mapboxgl.EvaluationParameters(zoom,{now:now,fadeDuration:this._mockMap._fadeDuration,zoomHistory:this._style.zoomHistory,transition:this._style.getTransition()});this._style.update(parameters),this._style._updateSources(this._transform)}render({resolution:resolution,camera:camera,renderTarget:renderTarget}){this._tileRenderer.render({resolution:resolution,camera:camera,transform:this._transform,style:this._style}),this._needsReRender=this._tileRenderer.needsReRender}get needsReRender(){return this._needsReRender}setLngLat(lngLat,lngLatInMapSpace){this._transform.setLngLat(lngLat,lngLatInMapSpace)}setMapScale(mapScale){this._transform.setMapScale(mapScale)}setMapRotation(mapRotation){this._transform.setMapRotation(mapRotation)}setViewportSize(viewportSize){this._transform.setViewportSize(viewportSize);for(const layerId of this._style._order)this._style._layers[layerId].resize()}setOverlayColor(color,opacity){this._tileRenderer.setOverlayColor(color,opacity)}setOverlayColorGradient(gradient,color,opacity){this._tileRenderer.setOverlayColorGradient(gradient,color,opacity)}setShouldDrawTiles(shouldDrawTiles){this._tileRenderer.setShouldDrawTiles(shouldDrawTiles)}addDebugControls(debugUI){let overlayColor=new Color,overlayOpacity=0,overlayGradient=!0,overlayColor2=new Color,overlayOpacity2=0;debugUI.addDebugControls({[DEBUG_UI_CATEGORY]:[{name:"Draw Debug Rectangle",description:"Draw a rectangle overtop of the viewport, to ensure rendering is occurring.",control:new DebugUICheckbox({current:!1,onValueChanged:value=>{this._tileRenderer._shouldDrawDebug=value,this.publish("render")}})},{name:"Overlay Color",description:"The color that will be used for the background overlay, or the first color stop for the gradient.",control:new DebugUIColorPicker({current:overlayColor,onValueChanged:color=>{overlayColor=color,this.setOverlayColor(overlayColor,overlayOpacity),this.publish("render")}})},{name:"Overlay Opacity",description:"The opacity that will be used for the background overlay, or the first color stop's opacity for the gradient.",control:new DebugUIScalarSlider({minimum:0,maximum:1,step:.01,current:0,onValueChanged:value=>{overlayOpacity=value,this.setOverlayColor(overlayColor,overlayOpacity),this.publish("render")}})},{name:"Overlay Gradient",description:"If true, the background overlay will be a gradient between the overlay color at the bottom and the overlay gradient color at the top.",control:new DebugUICheckbox({current:!1,onValueChanged:value=>{overlayGradient=value,this.setOverlayColorGradient(overlayGradient,overlayColor2,overlayOpacity2),this.publish("render")}})},{name:"Overlay Gradient Color",description:"The color of the overlay gradient bottom color stop.",control:new DebugUIColorPicker({current:overlayColor2,onValueChanged:color=>{overlayColor2=color,this.setOverlayColorGradient(overlayGradient,overlayColor2,overlayOpacity2),this.publish("render")}})},{name:"Overlay Gradient Opacity",description:"The opacity of the overlay gradient bottom color stop.",control:new DebugUIScalarSlider({minimum:0,maximum:1,step:.01,current:0,onValueChanged:value=>{overlayOpacity2=value,this.setOverlayColorGradient(overlayGradient,overlayColor2,overlayOpacity2),this.publish("render")}})}]}),this._styleControlsAdded=!1,this._tryAddStyleControls(debugUI)}removeDebugControls(debugUI){debugUI.removeDebugControls({[DEBUG_UI_CATEGORY]:["Draw Debug Rectangle","Overlay Color","Overlay Opacity","Overlay Gradient","Overlay Gradient Color","Overlay Gradient Opacity"],[DEBUG_UI_CATEGORY_STYLE]:["Style Layer","Style Layer Color","Style Layer Opacity","Reset Style Layer Overrides"]})}_tryAddStyleControls(debugUI){if(!this._styleControlsAdded)if(this._style.loaded&&Object.keys(this._style._layers).length>0){this._styleControlsAdded=!0;let styles=Object.keys(this._tileRenderer.getOverridableStyles(this._style));styles.sort();let currentStyleLayer=null,styleLayerColorPicker=new DebugUIColorPicker({current:new Color,onValueChanged:value=>{null!=currentStyleLayer&&(this._tileRenderer.setStyleOverride(currentStyleLayer,"color",value.clone()),this.publish("render"))}}),styleLayerOpacitySlider=new DebugUIScalarSlider({minimum:0,maximum:1,step:.01,current:1,onValueChanged:value=>{null!=currentStyleLayer&&(this._tileRenderer.setStyleOverride(currentStyleLayer,"opacity",value),this.publish("render"))}});const setControlValues=styleLayer=>{currentStyleLayer=null;let color=this._tileRenderer.getStyleOverrideOrDefault(this._style,styleLayer,"color");null!=color&&styleLayerColorPicker.setValue(color.clone());let opacity=this._tileRenderer.getStyleOverrideOrDefault(this._style,styleLayer,"opacity");null!=opacity&&styleLayerOpacitySlider.setValue(opacity),currentStyleLayer=styleLayer};let styleLayerResetButton=new DebugUIButton({label:"Reset",onClick:value=>{null!=currentStyleLayer&&(this._tileRenderer.setStyleOverride(currentStyleLayer,"color",void 0),this._tileRenderer.setStyleOverride(currentStyleLayer,"opacity",void 0),this.publish("render"),setControlValues(currentStyleLayer))}}),styleLayerDropdown=new DebugUIDropdown({values:styles,current:null,onValueChanged:value=>{setControlValues(value)}});debugUI.addDebugControls({[DEBUG_UI_CATEGORY_STYLE]:[{name:"Style Layer",description:"Which style layer will be edited by the style layer controls.",control:styleLayerDropdown},{name:"Style Layer Color",description:"The color of this style layer.",control:styleLayerColorPicker},{name:"Style Layer Opacity",description:"The opacity of this style layer.",control:styleLayerOpacitySlider},{name:"Reset Style Layer Overrides",description:"Return the values for this style layer to their default values.",control:styleLayerResetButton}]})}else this._onEvent.push(this._tryAddStyleControls.bind(this,debugUI))}dumpDebug(){this._tileRenderer.dumpDebug()}_handleEvent(event){"data"===event.type&&this.publish("render");const onEvents=this._onEvent;this._onEvent=[];for(const onEvent of onEvents)onEvent()}}
